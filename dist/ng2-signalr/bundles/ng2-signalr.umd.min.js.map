{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ng2-signalr/lib/services/eventing/broadcast.event.listener.ts","ng://ng2-signalr/lib/services/testing/signalr.connection.mock.ts","ng://ng2-signalr/lib/services/testing/signalr.connection.mock.manager.ts","ng://ng2-signalr/lib/services/connection/connection.status.ts","ng://ng2-signalr/lib/services/connection/connection.statuses.ts","ng://ng2-signalr/lib/services/connection/signalr.connection.ts","ng://ng2-signalr/lib/services/connection/connection.transport.ts","ng://ng2-signalr/lib/services/connection/connection.transports.ts","ng://ng2-signalr/lib/services/signalr.configuration.ts","ng://ng2-signalr/lib/services/signalr.module.ts","ng://ng2-signalr/lib/services/signalr.ts","ng://ng2-signalr/lib/signalr-no-jquery/jquery-deferred/lib/jquery-core.ts","ng://ng2-signalr/lib/signalr-no-jquery/jquery-deferred/lib/jquery-callbacks.ts","ng://ng2-signalr/lib/signalr-no-jquery/jquery-deferred/lib/jquery-deferred.ts","ng://ng2-signalr/lib/signalr-no-jquery/jQueryShim.ts","ng://ng2-signalr/lib/signalr-no-jquery/jquery-param/jquery-param.ts","ng://ng2-signalr/lib/signalr-no-jquery/signalR.ts","ng://ng2-signalr/lib/modules/signalr-module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","BroadcastEventListener","event","_this","_super","Error","__","constructor","create","tslib_1.__extends","Subject","SignalRConnectionMock","_mockErrors$","_mockStatus$","_listeners","defineProperty","asObservable","stop","start","Promise","resolve","invoke","method","parameters","_i","listen","listener","listenFor","listenForRaw","SignalRConnectionMockManager","_errors$","_status$","_object","ConnectionStatus","_value","names","Number","toString","name","equals","other","ConnectionStatuses","statuses","SignalRConnection","jConnection","jProxy","zone","configuration","_jProxy","_jConnection","_zone","_errors","wireUpErrorsAsObservable","_status","wireUpStatusEventsAsObservable","_configuration","jTransports","convertTransports","transport","reject","jsonp","pingInterval","withCredentials","console","log","id","fail","message","$promise","_a","result","err","setListener","args","run","casted","executeEventsInZone","stopListening","_b","tslib_1.__values","_c","callback","off","on","transports","map","sError","executeErrorsInZone","sStatus","stateChanged","change","newState","executeStatusChangeInZone","onBroadcastEventReceived","logging","join","func","inZone","runOutsideAngular","ConnectionTransport","_name","ConnectionTransports","SignalRConfiguration","hubName","qs","url","auto","SIGNALR_JCONNECTION_TOKEN","InjectionToken","SignalR","jHubConnectionFn","_jHubConnectionFn","createConnection","options","merge","logConfiguration","createHubProxy","connect","serializedQs","JSON","stringify","serializedTransport","overrides","merged","Injectable","NgZone","Inject","jQuery","type","obj","String","class2type","isArray","inArray","arr","item","indexOf","isFunction","isPlainObject","each","object","isObj","undefined","extend","src","copy","copyIsArray","clone","target","deep","noop","split","forEach","toLowerCase","jQueryCallBack","Callbacks","core_rspace","optionsCache","memory","fired","firing","firingStart","firingLength","firingIndex","_","flag","createOptions","list","stack","once","fire","data","stopOnFalse","shift","self","disable","add","arg","unique","has","remove","index","splice","fn","empty","disabled","lock","locked","fireWith","context","slice","core_slice","Deferred","tuples","state","promise","always","deferred","pipe","then","fns","newDefer","tuple","action","returned","progress","notify","stateString","when","subordinate","progressValues","progressContexts","resolveContexts","resolveValues","remaining","updateFunc","contexts","values","notifyWith","resolveWith","xhrObj","xhr","XMLHttpRequest","jQueryShim","jQueryDeferred","subject","events","window","0","load","handler","addEventListener","bind","unbind","removeEventListener","handlers","idx","current","triggerHandler","defaultAjaxHeaders","ajax","request","onreadystatechange","readyState","status","success","parse","responseText","open","setRequestHeader","contentType","send","abort","trim","str","isEmptyObject","keys","makeArray","param","a","rbracket","k","v","encodeURIComponent","buildParams","prefix","len","key","test","replace","jQueryParam","support","cors","$","signalR","_connection","resources","nojQuery","noTransportOnInit","errorOnNegotiate","stoppedWhileLoading","stoppedWhileNegotiating","errorParsingNegotiateResponse","errorDuringStartRequest","stoppedDuringStartRequest","errorParsingStartResponse","invalidStartResponse","protocolIncompatible","sendFailed","parseFailed","longPollFailed","eventSourceFailedToConnect","eventSourceError","webSocketClosed","pingServerFailedInvalidResponse","pingServerFailed","pingServerFailedStatusCode","pingServerFailedParse","noConnectionTransport","webSocketsInvalidState","reconnectTimeout","reconnectWindowTimeout","version","matches","_pageLoaded","document","_pageWindow","onStart","onStarting","onReceived","onError","onConnectionSlow","onReconnecting","onReconnect","onStateChanged","onDisconnect","changeState","connection","expectedState","oldState","supportsKeepAlive","keepAliveData","activated","addDefaultPort","protocol","match","getDefaultPort","ConnectingMessageBuffer","drainCallback","buffer","tryBuffer","connectionState","connecting","drain","connected","clear","init","defaultContentType","ieVersion","navigator","appName","exec","userAgent","parseFloat","source","transportError","format","firefoxMajorVersion","parseInt","configurePingInterval","config","onFail","pingIntervalId","setInterval","_logic","pingServer","ajaxDefaults","processData","timeout","async","global","cache","isDisconnecting","disconnected","reconnecting","hub","$connection","lastError","connectingMessageBuffer","lastMessageAt","Date","getTime","lastActiveAt","beatInterval","beatHandle","totalTransportConnectTimeout","_parseResponse","response","json","_originalJson","isCrossDomain","against","link","location","createElement","href","host","ajaxDataType","clientProtocol","reconnectDelay","transportConnectTimeout","disconnectTimeout","reconnectWindow","keepAliveWarnAt","initialize","waitForPageLoad","_deferral","parser","requestedTransport","validateTransport","deferredStartHandler","stopReconnectingTimeout","onReconnectTimeout","configuredStopReconnectingTimeout","setTimeout","clearTimeout","configureStopReconnectingTimeout","baseUrl","wsProtocol","initHandler","noTransportError","transportName","onFallback","isFirefox11OrGreater","asyncAbort","monitorKeepAlive","startHeartbeat","onFailed","negotiateRequest","prepareQueryString","statusText","res","protocolError","supportedTransports","appRelativeUrl","Url","ConnectionId","token","ConnectionToken","webSocketServerUrl","WebSocketServerUrl","pollTimeout","ConnectionTimeout","DisconnectTimeout","TransportConnectTimeout","KeepAliveTimeout","timeoutWarning","ProtocolVersion","TryWebSockets","starting","received","errorData","sendData","connectionSlow","reconnected","notifyServer","deferral","clearInterval","stopMonitoringKeepAlive","messageId","groupsToken","msg","toTimeString","debug","noConflict","transportLogic","beat","monitoring","timeElapsed","lostConnection","userNotified","checkIfAlive","markActive","getAjaxUrl","path","InitHandler","startRequested","startCompleted","connectionStopped","onSuccess","that","failCalled","initReceived","transportFailed","transportTimeoutHandle","tryAbortStartRequest","ajaxStart","wrappedError","xhrFields","dataType","addQs","Response","preparedUrl","firstChar","appender","charAt","getUrl","poll","ajaxPost","Math","floor","random","maximizePersistentResponse","minPersistentResponse","MessageId","C","Messages","M","Initialized","ShouldReconnect","LongPollDelay","L","GroupsToken","G","updateGroups","stringifySend","ajaxSend","payload","triggerReceived","textStatus","ajaxAbort","rejectDeferred","triggerStartError","startRequest","tryInitialize","persistentResponse","onInitialized","processMessages","minData","markLastMessage","reconnectKeepAliveUpdate","verifyLastActive","isConnectedOrReconnecting","ensureReconnectingState","clearReconnectTimeout","reconnect","handleParseFailure","foreverFrame","count","connections","webSockets","socket","ex","opened","WebSocket","onopen","onclose","wasClean","reason","onmessage","close","clearReconnectAttemptTimeout","reconnectAttemptTimeoutHandle","serverSentEvents","timeOut","eventSource","EventSource","Message","OPEN","eventPhase","CLOSED","loadingFixIntervalId","attachedTo","createFrame","frame","setAttribute","loadPreventer","prevent","tempFrame","body","appendChild","removeChild","cancel","iframeClearThreshold","frameId","documentElement","receive","cw","frameMessageCount","contentWindow","contentDocument","firstChild","execCommand","parentNode","getConnection","started","longPolling","fireConnect","tryFailConnect","privateData","reconnectErrors","fireReconnected","instance","reconnectTimeoutId","pollXhr","pollTimeoutId","raiseReconnect","polling","postData","onprogress","shouldReconnect","delay","min","pow","eventNamespace","makeEventName","fun","thisp","getArgValue","hasMembers","clearInvocationCallbacks","callbacks","invocationCallbacks","callbackId","invocationCallbackId","scope","E","hubProxy","hubConnection","settings","useDefaultPath","callbackMap","hasSubscriptions","eventName","callbackSpace","methodName","argValues","H","A","I","S","minResult","_maximizeHubResponse","State","Progress","Data","progressjQueryVersionLogged","jquery","StackTrace","IsHubException","ErrorData","rejectWith","Result","minHubResponse","R","P","Id","D","T","proxies","proxy","dataCallbackId","_maximizeClientHubInvocation","Method","Hub","Args","errData","origData","minClientHubInvocation","_registerSubscribedHubs","_subscribedToHubs","subscribedHubs","SIGNALR_CONFIGURATION","createSignalr","jConnectionFn","hubConnectionFn","getJConnectionFn","SignalRModule","forRoot","getSignalRConfiguration","ngModule","providers","provide","useFactory","deps","forChild","NgModule","useValue","ɵ0"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Subject } from 'rxjs';\r\n\r\nexport class BroadcastEventListener<T> extends Subject<T> {\r\n\r\n    constructor(public event: string) {\r\n        super();\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to create BroadcastEventListener. Argument \\'event\\' can not be empty');\r\n        }\r\n    }\r\n}\r\n","import { Observable, AsyncSubject, ReplaySubject, Subject } from 'rxjs';\r\nimport { SignalRConfiguration } from '../signalr.configuration';\r\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\r\nimport { ConnectionStatus } from '../connection/connection.status';\r\nimport { ISignalRConnection } from '../connection/i.signalr.connection';\r\n\r\nexport interface IListenerCollection {\r\n    [name: string]: BroadcastEventListener<any>;\r\n}\r\n\r\nexport class SignalRConnectionMock implements ISignalRConnection {\r\n    constructor(\r\n        private _mockErrors$: Subject<any>,\r\n        private _mockStatus$: Subject<ConnectionStatus>,\r\n        private _listeners: IListenerCollection) {\r\n    }\r\n\r\n    get errors(): Observable<any> {\r\n        return this._mockErrors$;\r\n    }\r\n\r\n    get status(): Observable<ConnectionStatus> {\r\n        return this._mockStatus$.asObservable();\r\n    }\r\n\r\n    get id(): string {\r\n        return 'xxxxxxxx-xxxx-xxxx-xxxxxxxxx';\r\n    }\r\n\r\n    public stop(): void {\r\n        //\r\n    }\r\n\r\n    public start(): Promise<any> {\r\n        return Promise.resolve(null); // TODO: implement\r\n    }\r\n\r\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    public listen<T>(listener: BroadcastEventListener<T>): void {\r\n        this._listeners[listener.event] = listener;\r\n    }\r\n\r\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\r\n        const listener = new BroadcastEventListener<T>(event);\r\n        this.listen(listener);\r\n        return listener;\r\n    }\r\n\r\n    public listenForRaw(event: string): BroadcastEventListener<any[]> {\r\n        const listener = new BroadcastEventListener<any[]>(event);\r\n        this._listeners[listener.event] = listener;\r\n        return listener;\r\n    }\r\n}\r\n","import { Subject, ReplaySubject } from 'rxjs';\r\nimport { SignalRConnectionMock, IListenerCollection } from './signalr.connection.mock';\r\nimport { ConnectionStatus } from '../connection/connection.status';\r\n\r\nexport class SignalRConnectionMockManager {\r\n\r\n    private _listeners: IListenerCollection;\r\n    private _status$: Subject<ConnectionStatus>;\r\n    private _errors$: Subject<any>;\r\n    private _object: SignalRConnectionMock;\r\n\r\n    constructor() {\r\n        this._errors$ = new Subject<any>();\r\n        this._status$ = new Subject<ConnectionStatus>();\r\n        this._listeners = {};\r\n        this._object = new SignalRConnectionMock(this._errors$, this._status$, this._listeners);\r\n    }\r\n\r\n    get mock(): SignalRConnectionMock {\r\n        return this._object;\r\n    }\r\n\r\n    get errors$(): Subject<any> {\r\n        return this._errors$;\r\n    }\r\n\r\n    get status$(): Subject<ConnectionStatus> {\r\n        return this._status$;\r\n    }\r\n\r\n    get listeners(): IListenerCollection {\r\n        return this._listeners;\r\n    }\r\n}\r\n","export class ConnectionStatus {\r\n\r\n    private static names: string[] = ['connecting', 'connected', 'reconnecting', '', 'disconnected'];\r\n\r\n    private _value: number;\r\n\r\n    get value(): number {\r\n        return this._value;\r\n    }\r\n\r\n     get name(): string {\r\n        return ConnectionStatus.names[Number(this._value.toString())];\r\n    }\r\n\r\n    constructor(value: number) {\r\n        if (value == null || value < 0) {\r\n            throw new Error('Failed to create ConnectionStatus. Argument \\'name\\' can not be null or empty.');\r\n        }\r\n        this._value = value;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.name;\r\n    }\r\n\r\n    public equals(other: ConnectionStatus): boolean {\r\n        if (other == null) {\r\n            return false;\r\n        }\r\n        return this._value === other.value;\r\n    }\r\n}\r\n","import { ConnectionStatus } from './connection.status';\r\n\r\n// @dynamic\r\nexport class ConnectionStatuses {\r\n\r\n    private static statuses: ConnectionStatus[] =\r\n        [\r\n            new ConnectionStatus(0),\r\n            new ConnectionStatus(1),\r\n            new ConnectionStatus(2),\r\n            new ConnectionStatus(4)\r\n        ];\r\n\r\n    public static get connecting(): ConnectionStatus {\r\n        return ConnectionStatuses.statuses[0];\r\n    }\r\n\r\n    public static get connected(): ConnectionStatus {\r\n        return ConnectionStatuses.statuses[1];\r\n    }\r\n\r\n    public static get reconnecting(): ConnectionStatus {\r\n        return ConnectionStatuses.statuses[2];\r\n    }\r\n\r\n    public static get disconnected(): ConnectionStatus {\r\n        return ConnectionStatuses.statuses[3];\r\n    }\r\n}\r\n","import { ISignalRConnection } from './i.signalr.connection';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\r\nimport { ConnectionStatus } from './connection.status';\r\nimport { NgZone } from '@angular/core';\r\nimport { SignalRConfiguration } from '../signalr.configuration';\r\nimport { ConnectionTransport } from './connection.transport';\r\n\r\nexport declare type CallbackFn = (...args: any[]) => void;\r\n\r\nexport class SignalRConnection implements ISignalRConnection {\r\n    private _status: Observable<ConnectionStatus>;\r\n    private _errors: Observable<any>;\r\n    private _jConnection: any;\r\n    private _jProxy: any;\r\n    private _zone: NgZone;\r\n    private _configuration: SignalRConfiguration;\r\n    private _listeners: { [eventName: string]: CallbackFn[] };\r\n\r\n    constructor(jConnection: any, jProxy: any, zone: NgZone, configuration: SignalRConfiguration) {\r\n        this._jProxy = jProxy;\r\n        this._jConnection = jConnection;\r\n        this._zone = zone;\r\n        this._errors = this.wireUpErrorsAsObservable();\r\n        this._status = this.wireUpStatusEventsAsObservable();\r\n        this._configuration = configuration;\r\n        this._listeners = {};\r\n    }\r\n\r\n    public get errors(): Observable<any> {\r\n        return this._errors;\r\n    }\r\n\r\n    public get status(): Observable<ConnectionStatus> {\r\n        return this._status;\r\n    }\r\n\r\n    public start(): Promise<ISignalRConnection> {\r\n\r\n        const jTransports = this.convertTransports(this._configuration.transport);\r\n\r\n        const $promise = new Promise<ISignalRConnection>((resolve, reject) => {\r\n            this._jConnection\r\n                .start({\r\n                    jsonp: this._configuration.jsonp,\r\n                    pingInterval: this._configuration.pingInterval,\r\n                    transport: jTransports,\r\n                    withCredentials: this._configuration.withCredentials,\r\n                })\r\n                .done(() => {\r\n                    console.log('Connection established, ID: ' + this._jConnection.id);\r\n                    console.log('Connection established, Transport: ' + this._jConnection.transport.name);\r\n                    resolve(this);\r\n                })\r\n                .fail((error: any) => {\r\n                    console.log('Could not connect');\r\n                    reject('Failed to connect. Error: ' + error.message); // ex: Error during negotiation request.\r\n                });\r\n        });\r\n        return $promise;\r\n    }\r\n\r\n    public stop(): void {\r\n        this._jConnection.stop();\r\n    }\r\n\r\n    public get id(): string {\r\n        return this._jConnection.id;\r\n    }\r\n\r\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\r\n        if (method == null) {\r\n            throw new Error('SignalRConnection: Failed to invoke. Argument \\'method\\' can not be null');\r\n        }\r\n        this.log(`SignalRConnection. Start invoking \\'${method}\\'...`);\r\n\r\n        const $promise = new Promise<any>((resolve, reject) => {\r\n            this._jProxy.invoke(method, ...parameters)\r\n                .done((result: any) => {\r\n                    this.log(`\\'${method}\\' invoked succesfully. Resolving promise...`);\r\n                    resolve(result);\r\n                    this.log(`Promise resolved.`);\r\n                })\r\n                .fail((err: any) => {\r\n                    console.log(`Invoking \\'${method}\\' failed. Rejecting promise...`);\r\n                    reject(err);\r\n                    console.log(`Promise rejected.`);\r\n                });\r\n        });\r\n        return $promise;\r\n    }\r\n\r\n    public listen<T>(listener: BroadcastEventListener<T>): void {\r\n        if (listener == null) {\r\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\r\n        }\r\n\r\n        const callback: CallbackFn = (...args: any[]) => {\r\n            this.run(() => {\r\n                let casted: T = null;\r\n                if (args.length > 0) {\r\n                    casted = args[0] as T;\r\n                }\r\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n                listener.next(casted);\r\n                this.log('listener next() called.');\r\n            }, this._configuration.executeEventsInZone);\r\n        };\r\n\r\n        this.setListener(callback, listener);\r\n    }\r\n\r\n    public stopListening<T>(listener: BroadcastEventListener<T>): void {\r\n        if (listener == null) {\r\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\r\n        }\r\n\r\n        this.log(`SignalRConnection: Stopping listening to server event with name ${listener.event}`);\r\n        if (!this._listeners[listener.event]) {\r\n            this._listeners[listener.event] = [];\r\n        }\r\n\r\n        for (const callback of this._listeners[listener.event]) {\r\n            this._jProxy.off(listener.event, callback);\r\n        }\r\n\r\n        this._listeners[listener.event] = [];\r\n    }\r\n\r\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\r\n        }\r\n\r\n        const listener = new BroadcastEventListener<T>(event);\r\n\r\n        this.listen(listener);\r\n\r\n        return listener;\r\n    }\r\n\r\n    public listenForRaw(event: string): BroadcastEventListener<any[]> {\r\n        if (event == null || event === '') {\r\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\r\n        }\r\n\r\n        const listener = new BroadcastEventListener<any[]>(event);\r\n\r\n        const callback: CallbackFn = (...args: any[]) => {\r\n            this.run(() => {\r\n                let casted: any[] = [];\r\n                if (args.length > 0) {\r\n                    casted = args;\r\n                }\r\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n                listener.next(args);\r\n                this.log('listener next() called.');\r\n            }, this._configuration.executeEventsInZone);\r\n        };\r\n\r\n        this.setListener(callback, listener);\r\n        return listener;\r\n    }\r\n\r\n    private setListener<T>(callback: CallbackFn, listener: BroadcastEventListener<T>) {\r\n        this.log(`SignalRConnection: Starting to listen to server event with name ${listener.event}`);\r\n        this._jProxy.on(listener.event, callback);\r\n\r\n        if (this._listeners[listener.event] == null) {\r\n            this._listeners[listener.event] = [];\r\n        }\r\n\r\n        this._listeners[listener.event].push(callback);\r\n    }\r\n\r\n    private convertTransports(transports: ConnectionTransport | ConnectionTransport[]): any {\r\n        if (transports instanceof Array) {\r\n            return transports.map((t: ConnectionTransport) => t.name);\r\n        }\r\n        return transports.name;\r\n    }\r\n\r\n    private wireUpErrorsAsObservable(): Observable<any> {\r\n        const sError = new Subject<any>();\r\n\r\n        this._jConnection.error((error: any) => {\r\n            this.run(() => sError.next(error), this._configuration.executeErrorsInZone);\r\n        });\r\n        return sError;\r\n    }\r\n\r\n    private wireUpStatusEventsAsObservable(): Observable<ConnectionStatus> {\r\n        const sStatus = new Subject<ConnectionStatus>();\r\n        // aggregate all signalr connection status handlers into 1 observable.\r\n        // handler wire up, for signalr connection status callback.\r\n        this._jConnection.stateChanged((change: any) => {\r\n            this.run(() => sStatus.next(new ConnectionStatus(change.newState)),\r\n                this._configuration.executeStatusChangeInZone);\r\n        });\r\n        return sStatus.asObservable();\r\n    }\r\n\r\n    private onBroadcastEventReceived<T>(listener: BroadcastEventListener<T>, ...args: any[]) {\r\n        this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\r\n\r\n        let casted: T = null;\r\n        if (args.length > 0) {\r\n            casted = args[0] as T;\r\n        }\r\n\r\n        this.run(() => {\r\n            listener.next(casted);\r\n        }, this._configuration.executeEventsInZone);\r\n\r\n        this.log('listener next() called.');\r\n    }\r\n\r\n    private log(...args: any[]) {\r\n        if (this._jConnection.logging === false) {\r\n            return;\r\n        }\r\n        console.log(args.join(', '));\r\n    }\r\n\r\n    private run(func: () => void, inZone: boolean) {\r\n        if (inZone) {\r\n            this._zone.run(() => func());\r\n        } else {\r\n            this._zone.runOutsideAngular(() => func());\r\n        }\r\n    }\r\n}\r\n","export class ConnectionTransport {\r\n\r\n    private _name: string;\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    constructor(name: string) {\r\n        if (name == null || name === '') {\r\n            throw new Error('Failed to create ConnectionTransport. Argument \\'name\\' can not be null or empty.');\r\n        }\r\n        this._name = name;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this._name;\r\n    }\r\n\r\n    public equals(other: ConnectionTransport): boolean {\r\n        if (other == null) {\r\n            return false;\r\n        }\r\n\r\n        return this._name === other.name;\r\n    }\r\n}\r\n","import { ConnectionTransport } from './connection.transport';\r\n\r\n// @dynamic\r\nexport class ConnectionTransports {\r\n\r\n    private static transports: ConnectionTransport[] =\r\n        [\r\n            new ConnectionTransport('foreverFrame'),\r\n            new ConnectionTransport('longPolling'),\r\n            new ConnectionTransport('serverSentEvents'),\r\n            new ConnectionTransport('webSockets'),\r\n            new ConnectionTransport('auto'),\r\n        ];\r\n\r\n    public static get foreverFrame(): ConnectionTransport {\r\n        return ConnectionTransports.transports[0];\r\n    }\r\n\r\n    public static get longPolling(): ConnectionTransport {\r\n        return ConnectionTransports.transports[1];\r\n    }\r\n\r\n    public static get serverSentEvents(): ConnectionTransport {\r\n        return ConnectionTransports.transports[2];\r\n    }\r\n\r\n    public static get webSockets(): ConnectionTransport {\r\n        return ConnectionTransports.transports[3];\r\n    }\r\n\r\n    public static get auto(): ConnectionTransport {\r\n        return ConnectionTransports.transports[4];\r\n    }\r\n}\r\n","\r\nimport { ConnectionTransports } from './connection/connection.transports';\r\nimport { ConnectionTransport } from './connection/connection.transport';\r\nimport { IConnectionOptions } from './connection/connection.options';\r\n\r\nexport class SignalRConfiguration implements IConnectionOptions {\r\n\r\n    /** connection url to the SignalR service */\r\n    public url: string;\r\n\r\n    /** Allows you to specify query string parameters object when the client connects */\r\n    public qs?: any;\r\n\r\n    /** name of the SignalR service hub to connect to */\r\n    public hubName: string;\r\n\r\n    /** disable/enables client side logging. Defaults to false */\r\n    public logging: boolean;\r\n\r\n    /** Allows jsonp. This flag can be used to suppport CORS on older browsers */\r\n    public jsonp: boolean;\r\n\r\n     /** Allows withCredentials. This flag can be used to suppport CORS */\r\n    public withCredentials: boolean;\r\n\r\n    /** Allows pingInterval */\r\n    public pingInterval?: number;\r\n\r\n    /** Allows you to specify transport. You can specify a fallback order if you wan't to try specific transports in order. By default selects best avaliable transport. */\r\n    public transport: ConnectionTransport | ConnectionTransport[];\r\n\r\n    /** Allows you to run the event callback outside ngZone */\r\n    public executeEventsInZone?: boolean;\r\n\r\n    /** Allows you to run the errors callback outside ngZone */\r\n    public executeErrorsInZone?: boolean;\r\n\r\n    /** Allows you to run the status change in callback outside ngZone */\r\n    public executeStatusChangeInZone?: boolean;\r\n\r\n    constructor() {\r\n       this.hubName = null;\r\n       this.logging = false;\r\n       this.qs  = null;\r\n       this.url = null;\r\n       this.jsonp = false;\r\n       this.withCredentials = false;\r\n       this.transport = ConnectionTransports.auto;\r\n       this.executeEventsInZone = true;\r\n       this.executeErrorsInZone = false;\r\n       this.executeStatusChangeInZone = true;\r\n       this.pingInterval = 300000;\r\n    }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const SIGNALR_JCONNECTION_TOKEN = new InjectionToken<any>('SIGNALR_JCONNECTION_TOKEN');\r\n","import { ISignalRConnection } from './connection/i.signalr.connection';\r\nimport { SignalRConfiguration } from './signalr.configuration';\r\nimport { SignalRConnection } from './connection/signalr.connection';\r\nimport { NgZone, Injectable, Inject } from '@angular/core';\r\nimport { IConnectionOptions } from './connection/connection.options';\r\nimport { SIGNALR_JCONNECTION_TOKEN } from './signalr.module';\r\n\r\ndeclare var jQuery: any;\r\n\r\n@Injectable()\r\nexport class SignalR {\r\n    private _configuration: SignalRConfiguration;\r\n    private _zone: NgZone;\r\n    private _jHubConnectionFn: any;\r\n\r\n    public constructor(\r\n        configuration: SignalRConfiguration,\r\n        zone: NgZone,\r\n        @Inject(SIGNALR_JCONNECTION_TOKEN) jHubConnectionFn: any /* use type 'any'; Suggested workaround from angular repository: https://github.com/angular/angular/issues/12631 */\r\n    ) {\r\n        this._configuration = configuration;\r\n        this._zone = zone;\r\n        this._jHubConnectionFn = jHubConnectionFn;\r\n    }\r\n\r\n    public createConnection(options?: IConnectionOptions): SignalRConnection {\r\n        const configuration = this.merge(options ? options : {});\r\n\r\n        this.logConfiguration(configuration);\r\n\r\n        // create connection object\r\n        const jConnection = this._jHubConnectionFn(configuration.url);\r\n        jConnection.logging = configuration.logging;\r\n        jConnection.qs = configuration.qs;\r\n\r\n        // create a proxy\r\n        const jProxy = jConnection.createHubProxy(configuration.hubName);\r\n        // !!! important. We need to register at least one function otherwise server callbacks will not work.\r\n        jProxy.on('noOp', () => { /* */ });\r\n\r\n        const hubConnection = new SignalRConnection(jConnection, jProxy, this._zone, configuration);\r\n\r\n        return hubConnection;\r\n    }\r\n\r\n    public connect(options?: IConnectionOptions): Promise<ISignalRConnection> {\r\n        return this.createConnection(options).start();\r\n    }\r\n\r\n    private logConfiguration(configuration: SignalRConfiguration) {\r\n        try {\r\n            const serializedQs = JSON.stringify(configuration.qs);\r\n            const serializedTransport = JSON.stringify(configuration.transport);\r\n            if (configuration.logging) {\r\n                console.log(`Creating connecting with...`);\r\n                console.log(`configuration:[url: '${configuration.url}'] ...`);\r\n                console.log(`configuration:[hubName: '${configuration.hubName}'] ...`);\r\n                console.log(`configuration:[qs: '${serializedQs}'] ...`);\r\n                console.log(`configuration:[transport: '${serializedTransport}'] ...`);\r\n            }\r\n        } catch (err) { /* */ }\r\n    }\r\n\r\n    private merge(overrides: IConnectionOptions): SignalRConfiguration {\r\n        const merged: SignalRConfiguration = new SignalRConfiguration();\r\n        merged.hubName = overrides.hubName || this._configuration.hubName;\r\n        merged.url = overrides.url || this._configuration.url;\r\n        merged.qs = overrides.qs || this._configuration.qs;\r\n        merged.logging = this._configuration.logging;\r\n        merged.jsonp = overrides.jsonp || this._configuration.jsonp;\r\n        merged.withCredentials = overrides.withCredentials || this._configuration.withCredentials;\r\n        merged.transport = overrides.transport || this._configuration.transport;\r\n        merged.executeEventsInZone = overrides.executeEventsInZone || this._configuration.executeEventsInZone;\r\n        merged.executeErrorsInZone = overrides.executeErrorsInZone || this._configuration.executeErrorsInZone;\r\n        merged.executeStatusChangeInZone = overrides.executeStatusChangeInZone || this._configuration.executeStatusChangeInZone;\r\n        merged.pingInterval = overrides.pingInterval || this._configuration.pingInterval;\r\n        return merged;\r\n    }\r\n\r\n}\r\n","/**\n* jQuery core object.\n*\n* Worker with jQuery deferred\n*\n* Code from: https://github.com/jquery/jquery/blob/master/src/core.js\n*\n*/\n\nvar jQuery = {\n\ttype: type\n\t, isArray: isArray\n\t, inArray: (arr,item) => arr.indexOf(item)\n\t, isFunction: isFunction\n\t, isPlainObject: isPlainObject\n\t, each: each\n\t, extend: extend\n\t, noop: function() {}\n};\n\nvar toString = Object.prototype.toString;\n\nvar class2type = {};\n// Populate the class2type map\n\"Boolean Number String Function Array Date RegExp Object\".split(\" \").forEach(function(name) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n});\n\n\nfunction type( obj ) {\n\treturn obj == null ?\n\t\tString( obj ) :\n\t\t\tclass2type[ toString.call(obj) ] || \"object\";\n}\n\nfunction isFunction( obj ) {\n\treturn jQuery.type(obj) === \"function\";\n}\n\nfunction isArray( obj ) {\n\treturn jQuery.type(obj) === \"array\";\n}\n\nfunction each( object, callback, args? ) {\n\tvar name, i = 0,\n\tlength = object.length,\n\tisObj = length === undefined || isFunction( object );\n\n\tif ( args ) {\n\t\tif ( isObj ) {\n\t\t\tfor ( name in object ) {\n\t\t\t\tif ( callback.apply( object[ name ], args ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( ; i < length; ) {\n\t\t\t\tif ( callback.apply( object[ i++ ], args ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// A special, fast, case for the most common use of each\n\t} else {\n\t\tif ( isObj ) {\n\t\t\tfor ( name in object ) {\n\t\t\t\tif ( callback.call( object[ name ], name, object[ name ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( ; i < length; ) {\n\t\t\t\tif ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn object;\n}\n\nfunction isPlainObject( obj ) {\n\t// Must be an Object.\n\tif ( !obj || jQuery.type(obj) !== \"object\" ) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nfunction extend(...args: any[]) {\n\tvar options, name, src, copy, copyIsArray, clone,\n\ttarget = args[0] || {},\n\ti = 1,\n\tlength = args.length,\n\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\t\ttarget = args[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction(target) ) {\n\t\ttarget = {};\n\t}\n\n\t// extend jQuery itself if only one argument is passed\n\tif ( length === i ) {\n\t\ttarget = this;\n\t\t--i;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\t\t// Only deal with non-null/undefined values\n\t\tif ( (options = arguments[ i ]) != null ) {\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\nexport default jQuery;","\nimport jQuery from \"./jquery-core\";\n\n\nvar jQueryCallBack = {...jQuery, Callbacks: null }, core_rspace = /\\s+/;\n/**\n* jQuery Callbacks\n*\n* Code from: https://github.com/jquery/jquery/blob/master/src/callbacks.js\n*\n*/\n\n\n// String to Object options format cache\nvar optionsCache = {};\n\n// Convert String-formatted options into Object-formatted ones and store in cache\nfunction createOptions( options ) {\n\tvar object = optionsCache[ options ] = {};\n\tjQuery.each( options.split( core_rspace ), function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t});\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQueryCallBack.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\t( optionsCache[ options ] || createOptions( options ) ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Last fire value (for non-forgettable lists)\n\t\tmemory,\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\t\t// Flag to know if list is currently firing\n\t\tfiring,\n\t\t// First callback to fire (used internally by add and fireWith)\n\t\tfiringStart,\n\t\t// End of the loop when firing\n\t\tfiringLength,\n\t\t// Index of currently firing callback (modified by remove if needed)\n\t\tfiringIndex,\n\t\t// Actual callback list\n\t\tlist = [],\n\t\t// Stack of fire calls for repeatable lists\n\t\tstack = !options.once && [],\n\t\t// Fire callbacks\n\t\tfire = function( data ) {\n\t\t\tmemory = options.memory && data;\n\t\t\tfired = true;\n\t\t\tfiringIndex = firingStart || 0;\n\t\t\tfiringStart = 0;\n\t\t\tfiringLength = list.length;\n\t\t\tfiring = true;\n\t\t\tfor ( ; list && firingIndex < firingLength; firingIndex++ ) {\n\t\t\t\tif ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {\n\t\t\t\t\tmemory = false; // To prevent further calls using add\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiring = false;\n\t\t\tif ( list ) {\n\t\t\t\tif ( stack ) {\n\t\t\t\t\tif ( stack.length ) {\n\t\t\t\t\t\tfire( stack.shift() );\n\t\t\t\t\t}\n\t\t\t\t} else if ( memory ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t} else {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// Actual Callbacks object\n\t\tself = {\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\t// First, we save the current length\n\t\t\t\t\tvar start = list.length;\n\t\t\t\t\t(function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tvar type = jQuery.type( arg );\n\t\t\t\t\t\t\tif ( type === \"function\" ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && type !== \"string\" ) {\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})( arguments );\n\t\t\t\t\t// Do we need to add the callbacks to the\n\t\t\t\t\t// current firing batch?\n\t\t\t\t\tif ( firing ) {\n\t\t\t\t\t\tfiringLength = list.length;\n\t\t\t\t\t// With memory, if we're not firing then\n\t\t\t\t\t// we should call right away\n\t\t\t\t\t} else if ( memory ) {\n\t\t\t\t\t\tfiringStart = start;\n\t\t\t\t\t\tfire( memory );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\t\tvar index;\n\t\t\t\t\t\twhile( ( index = jQuery.inArray( arg, list ) ) > -1 ) {\n\t\t\t\t\t\t\tlist.splice( index, 1 );\n\t\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\t\tif ( firing ) {\n\t\t\t\t\t\t\t\tif ( index <= firingLength ) {\n\t\t\t\t\t\t\t\t\tfiringLength--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Control if a given callback is in the list\n\t\t\thas: function( fn ) {\n\t\t\t\treturn jQuery.inArray( fn, list ) > -1;\n\t\t\t},\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tlist = [];\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Have the list do nothing anymore\n\t\t\tdisable: function() {\n\t\t\t\tlist = stack = memory = undefined;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it disabled?\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\t\t\t// Lock the list in its current state\n\t\t\tlock: function() {\n\t\t\t\tstack = undefined;\n\t\t\t\tif ( !memory ) {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Is it locked?\n\t\t\tlocked: function() {\n\t\t\t\treturn !stack;\n\t\t\t},\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\targs = args || [];\n\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\tif ( list && ( !fired || stack ) ) {\n\t\t\t\t\tif ( firing ) {\n\t\t\t\t\t\tstack.push( args );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfire( args );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nexport default jQueryCallBack;","\n/*!\n* jquery-deferred\n* Copyright(c) 2011 Hidden <zzdhidden@gmail.com>\n* MIT Licensed\n*/\n\n/**\n* Library version.\n*/\n\nimport jQuery from \"./jquery-callbacks\";\nvar core_slice = Array.prototype.slice;\n\n/**\n* jQuery deferred\n*\n* Code from: https://github.com/jquery/jquery/blob/master/src/deferred.js\n* Doc: http://api.jquery.com/category/deferred-object/\n*\n*/\n\njQuery.extend({\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\t\t\t\t// action, add listener, listener list, final state\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\" ],\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks(\"memory\") ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tpipe: undefined,\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn this.Deferred(function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\t\t\t\t\tvar action = tuple[ 0 ],\n\t\t\t\t\t\t\t\tfn = fns[ i ];\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[ tuple[1] ]( jQuery.isFunction( fn ) ?\n\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\tvar returned = fn.apply( this, arguments );\n\t\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject )\n\t\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify );\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tnewDefer[ action + \"With\" ]( this === deferred ? newDefer : this, [ returned ] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} :\n\t\t\t\t\t\t\t\tnewDefer[ action ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {\n\t\t\t\tdone: undefined\n\t\t\t};\n\n\t\t// Keep pipe for back-compat\n\t\tpromise.pipe = promise.then;\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 3 ];\n\n\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\tpromise[ tuple[1] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(function() {\n\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\tstate = stateString;\n\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n\t\t\t}\n\n\t\t\t// deferred[ resolve | reject | notify ] = list.fire\n\t\t\tdeferred[ tuple[0] ] = list.fire;\n\t\t\tdeferred[ tuple[0] + \"With\" ] = list.fireWith;\n\t\t});\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\n\t\tvar i = 0,\n\t\t\tresolveValues = core_slice.call( arguments ),\n\t\t\tlength = resolveValues.length,\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n\t\t\t// the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : this.Deferred(),\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function( i, contexts, values ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tcontexts[ i ] = this;\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;\n\t\t\t\t\tif( values === progressValues ) {\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\n\t\t\t\t\t} else if ( !( --remaining ) ) {\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tprogressValues, progressContexts, resolveContexts;\n\n\t\t// add listeners to Deferred subordinates; treat others as resolved\n\t\tif ( length > 1 ) {\n\t\t\tprogressValues = new Array( length );\n\t\t\tprogressContexts = new Array( length );\n\t\t\tresolveContexts = new Array( length );\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n\t\t\t\t\tresolveValues[ i ].promise()\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\n\t\t\t\t\t\t.fail( deferred.reject )\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) );\n\t\t\t\t} else {\n\t\t\t\t\t--remaining;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if we're not waiting on anything, resolve the master\n\t\tif ( !remaining ) {\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\n\t\t}\n\n\t\treturn deferred.promise();\n\t}\n});\n\nexport default jQuery;","'use strict';\r\n\r\nimport jQueryDeferred from './jquery-deferred';\r\nimport jQueryParam from './jquery-param/jquery-param';\r\n\r\nconst jqueryFunction = function(subject) {\r\n  let events = subject.events || {};\r\n\r\n  if (subject && subject === subject.window)\r\n    return {\r\n      0: subject,\r\n      load: (handler) => subject.addEventListener('load', handler, false),\r\n      bind: (event, handler) => subject.addEventListener(event, handler, false),\r\n      unbind: (event, handler) => subject.removeEventListener(event, handler, false)\r\n    };\r\n\r\n  return {\r\n    0: subject,\r\n\r\n    unbind(event, handler) {\r\n      let handlers = events[event] || [];\r\n\r\n      if (handler) {\r\n        let idx = handlers.indexOf(handler);\r\n        if (idx !== -1) handlers.splice(idx, 1);\r\n      } else handlers = [];\r\n\r\n      events[event] = handlers;\r\n      subject.events = events;\r\n\r\n    },\r\n    bind(event, handler) {\r\n      let current = events[event] || [];\r\n      events[event] = current.concat(handler);\r\n      subject.events = events;\r\n    },\r\n    triggerHandler(event, args) {\r\n      let handlers = events[event] || [];\r\n      handlers.forEach(fn => {\r\n        if (args && args[0] && args[0].type === undefined) {\r\n          args = [{\r\n            type: event\r\n          }].concat(args || []);\r\n        } else {\r\n          args = args || [];\r\n        }\r\n\r\n        fn.apply(this, args);\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nconst xhr = function() {\r\n  try {\r\n    return new XMLHttpRequest();\r\n  } catch (e) {}\r\n};\r\n\r\nconst ajax = function(options) {\r\n  const request = xhr();\r\n  request.onreadystatechange = () => {\r\n    if (request.readyState !== 4) {\r\n      return;\r\n    }\r\n\r\n    if (request.status === 200) {\r\n      options.success && options.success(JSON.parse(request.responseText));\r\n    } else {\r\n      options.error && options.error(request);\r\n    }\r\n  };\r\n\r\n  request.open(options.type, options.url);\r\n  request.setRequestHeader('content-type', options.contentType);\r\n\r\n  request.send(options.data.data && `data=${options.data.data}`);\r\n\r\n  return {\r\n    abort: function() {\r\n      return request.abort();\r\n    }\r\n  };\r\n};\r\n\r\nexport default jQueryDeferred.extend(\r\n  jqueryFunction,\r\n  jQueryDeferred,\r\n  {\r\n    defaultAjaxHeaders: null,\r\n    ajax: ajax,\r\n    trim: str => str && str.trim(),\r\n    isEmptyObject: obj => !obj || Object.keys(obj).length === 0,\r\n    makeArray: arr => [].slice.call(arr,0),\r\n    param: obj => jQueryParam(obj),\r\n    support: {\r\n      cors: (function() {\r\n        const xhrObj = xhr();\r\n        return !!xhrObj && (\"withCredentials\" in xhrObj);\r\n      })()\r\n    }\r\n  })\r\n  ","/**\n * @preserve jquery-param (c) 2015 KNOWLEDGECODE | MIT\n */\nvar param = function (a) {\n    var s = [], rbracket = /\\[\\]$/,\n        isArray = function (obj) {\n            return Object.prototype.toString.call(obj) === '[object Array]';\n        }, add = function (k, v) {\n            v = typeof v === 'function' ? v() : v === null ? '' : v === undefined ? '' : v;\n            s[s.length] = encodeURIComponent(k) + '=' + encodeURIComponent(v);\n        }, buildParams = function (prefix, obj) {\n            var i, len, key;\n\n            if (prefix) {\n                if (isArray(obj)) {\n                    for (i = 0, len = obj.length; i < len; i++) {\n                        if (rbracket.test(prefix)) {\n                            add(prefix, obj[i]);\n                        } else {\n                            buildParams(prefix + '[' + (typeof obj[i] === 'object' ? i : '') + ']', obj[i]);\n                        }\n                    }\n                } else if (obj && String(obj) === '[object Object]') {\n                    for (key in obj) {\n                        buildParams(prefix + '[' + key + ']', obj[key]);\n                    }\n                } else {\n                    add(prefix, obj);\n                }\n            } else if (isArray(obj)) {\n                for (i = 0, len = obj.length; i < len; i++) {\n                    add(obj[i].name, obj[i].value);\n                }\n            } else {\n                for (key in obj) {\n                    buildParams(key, obj[key]);\n                }\n            }\n            return s;\n        };\n\n    return buildParams('', a).join('&').replace(/%20/g, '+');\n};\n\nexport default param;","'use strict';\r\n\r\nimport jQueryShim from './jQueryShim';\r\n\r\n/* jquery.signalR.core.js */\r\n/*global window:false */\r\n/*!\r\n * ASP.NET SignalR JavaScript Library v2.2.1\r\n * http://signalr.net/\r\n *\r\n * Copyright (c) .NET Foundation. All rights reserved.\r\n * Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n *\r\n */\r\n\r\n/// <reference path=\"Scripts/jquery-1.6.4.js\" />\r\n/// <reference path=\"jquery.signalR.version.js\" />\r\n(function ($, window, undefined) {\r\n\r\n    var resources = {\r\n        nojQuery: \"jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.\",\r\n        noTransportOnInit: \"No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.\",\r\n        errorOnNegotiate: \"Error during negotiation request.\",\r\n        stoppedWhileLoading: \"The connection was stopped during page load.\",\r\n        stoppedWhileNegotiating: \"The connection was stopped during the negotiate request.\",\r\n        errorParsingNegotiateResponse: \"Error parsing negotiate response.\",\r\n        errorDuringStartRequest: \"Error during start request. Stopping the connection.\",\r\n        stoppedDuringStartRequest: \"The connection was stopped during the start request.\",\r\n        errorParsingStartResponse: \"Error parsing start response: '{0}'. Stopping the connection.\",\r\n        invalidStartResponse: \"Invalid start response: '{0}'. Stopping the connection.\",\r\n        protocolIncompatible: \"You are using a version of the client that isn't compatible with the server. Client version {0}, server version {1}.\",\r\n        sendFailed: \"Send failed.\",\r\n        parseFailed: \"Failed at parsing response: {0}\",\r\n        longPollFailed: \"Long polling request failed.\",\r\n        eventSourceFailedToConnect: \"EventSource failed to connect.\",\r\n        eventSourceError: \"Error raised by EventSource\",\r\n        webSocketClosed: \"WebSocket closed.\",\r\n        pingServerFailedInvalidResponse: \"Invalid ping response when pinging server: '{0}'.\",\r\n        pingServerFailed: \"Failed to ping server.\",\r\n        pingServerFailedStatusCode: \"Failed to ping server.  Server responded with status code {0}, stopping the connection.\",\r\n        pingServerFailedParse: \"Failed to parse ping server response, stopping the connection.\",\r\n        noConnectionTransport: \"Connection is in an invalid state, there is no transport active.\",\r\n        webSocketsInvalidState: \"The Web Socket transport is in an invalid state, transitioning into reconnecting.\",\r\n        reconnectTimeout: \"Couldn't reconnect within the configured timeout of {0} ms, disconnecting.\",\r\n        reconnectWindowTimeout: \"The client has been inactive since {0} and it has exceeded the inactivity timeout of {1} ms. Stopping the connection.\"\r\n    };\r\n\r\n    if (typeof ($) !== \"function\") {\r\n        // no jQuery!\r\n        throw new Error(resources.nojQuery);\r\n    }\r\n\r\n    var signalR,\r\n        _connection,\r\n        _pageLoaded = (window.document.readyState === \"complete\"),\r\n        _pageWindow = $(window),\r\n        _negotiateAbortText = \"__Negotiate Aborted__\",\r\n        events = {\r\n            onStart: \"onStart\",\r\n            onStarting: \"onStarting\",\r\n            onReceived: \"onReceived\",\r\n            onError: \"onError\",\r\n            onConnectionSlow: \"onConnectionSlow\",\r\n            onReconnecting: \"onReconnecting\",\r\n            onReconnect: \"onReconnect\",\r\n            onStateChanged: \"onStateChanged\",\r\n            onDisconnect: \"onDisconnect\"\r\n        },\r\n        ajaxDefaults = {\r\n            processData: true,\r\n            timeout: null,\r\n            async: true,\r\n            global: false,\r\n            cache: false\r\n        },\r\n        log = function (msg, logging) {\r\n            if (logging === false) {\r\n                return;\r\n            }\r\n            var m;\r\n            if (typeof (window.console) === \"undefined\") {\r\n                return;\r\n            }\r\n            m = \"[\" + new Date().toTimeString() + \"] SignalR: \" + msg;\r\n            if (window.console.debug) {\r\n                window.console.debug(m);\r\n            } else if (window.console.log) {\r\n                window.console.log(m);\r\n            }\r\n        },\r\n\r\n        changeState = function (connection, expectedState, newState) {\r\n            if (expectedState === connection.state) {\r\n                connection.state = newState;\r\n\r\n                $(connection).triggerHandler(events.onStateChanged, [{ oldState: expectedState, newState: newState }]);\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        isDisconnecting = function (connection) {\r\n            return connection.state === signalR.connectionState.disconnected;\r\n        },\r\n\r\n        supportsKeepAlive = function (connection) {\r\n            return connection._.keepAliveData.activated &&\r\n                connection.transport.supportsKeepAlive(connection);\r\n        },\r\n\r\n        configureStopReconnectingTimeout = function (connection) {\r\n            var stopReconnectingTimeout,\r\n                onReconnectTimeout;\r\n\r\n            // Check if this connection has already been configured to stop reconnecting after a specified timeout.\r\n            // Without this check if a connection is stopped then started events will be bound multiple times.\r\n            if (!connection._.configuredStopReconnectingTimeout) {\r\n                onReconnectTimeout = function (connection) {\r\n                    var message = signalR._.format(signalR.resources.reconnectTimeout, connection.disconnectTimeout);\r\n                    connection.log(message);\r\n                    $(connection).triggerHandler(events.onError, [signalR._.error(message, /* source */ \"TimeoutException\")]);\r\n                    connection.stop(/* async */ false, /* notifyServer */ false);\r\n                };\r\n\r\n                connection.reconnecting(function () {\r\n                    var connection = this;\r\n\r\n                    // Guard against state changing in a previous user defined even handler\r\n                    if (connection.state === signalR.connectionState.reconnecting) {\r\n                        stopReconnectingTimeout = window.setTimeout(function () { onReconnectTimeout(connection); }, connection.disconnectTimeout);\r\n                    }\r\n                });\r\n\r\n                connection.stateChanged(function (data) {\r\n                    if (data.oldState === signalR.connectionState.reconnecting) {\r\n                        // Clear the pending reconnect timeout check\r\n                        window.clearTimeout(stopReconnectingTimeout);\r\n                    }\r\n                });\r\n\r\n                connection._.configuredStopReconnectingTimeout = true;\r\n            }\r\n        };\r\n\r\n    signalR = function (url, qs, logging) {\r\n        /// <summary>Creates a new SignalR connection for the given url</summary>\r\n        /// <param name=\"url\" type=\"String\">The URL of the long polling endpoint</param>\r\n        /// <param name=\"qs\" type=\"Object\">\r\n        ///     [Optional] Custom querystring parameters to add to the connection URL.\r\n        ///     If an object, every non-function member will be added to the querystring.\r\n        ///     If a string, it's added to the QS as specified.\r\n        /// </param>\r\n        /// <param name=\"logging\" type=\"Boolean\">\r\n        ///     [Optional] A flag indicating whether connection logging is enabled to the browser\r\n        ///     console/log. Defaults to false.\r\n        /// </param>\r\n\r\n        return new signalR.fn.init(url, qs, logging);\r\n    };\r\n\r\n    signalR._ = {\r\n        defaultContentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n\r\n        ieVersion: (function () {\r\n            var version,\r\n                matches;\r\n\r\n            if (window.navigator.appName === 'Microsoft Internet Explorer') {\r\n                // Check if the user agent has the pattern \"MSIE (one or more numbers).(one or more numbers)\";\r\n                matches = /MSIE ([0-9]+\\.[0-9]+)/.exec(window.navigator.userAgent);\r\n\r\n                if (matches) {\r\n                    version = parseFloat(matches[1]);\r\n                }\r\n            }\r\n\r\n            // undefined value means not IE\r\n            return version;\r\n        })(),\r\n\r\n        error: function (message, source, context) {\r\n            var e = new Error(message) as any;\r\n            e.source = source;\r\n\r\n            if (typeof context !== \"undefined\") {\r\n                e.context = context;\r\n            }\r\n\r\n            return e;\r\n        },\r\n\r\n        transportError: function (message, transport, source, context) {\r\n            var e = this.error(message, source, context);\r\n            e.transport = transport ? transport.name : undefined;\r\n            return e;\r\n        },\r\n\r\n        format: function () {\r\n            /// <summary>Usage: format(\"Hi {0}, you are {1}!\", \"Foo\", 100) </summary>\r\n            var s = arguments[0];\r\n            for (var i = 0; i < arguments.length - 1; i++) {\r\n                s = s.replace(\"{\" + i + \"}\", arguments[i + 1]);\r\n            }\r\n            return s;\r\n        },\r\n\r\n        firefoxMajorVersion: function (userAgent) {\r\n            // Firefox user agents: http://useragentstring.com/pages/Firefox/\r\n            var matches = userAgent.match(/Firefox\\/(\\d+)/);\r\n            if (!matches || !matches.length || matches.length < 2) {\r\n                return 0;\r\n            }\r\n            return parseInt(matches[1], 10 /* radix */);\r\n        },\r\n\r\n        configurePingInterval: function (connection) {\r\n            var config = connection._.config,\r\n                onFail = function (error) {\r\n                    $(connection).triggerHandler(events.onError, [error]);\r\n                };\r\n\r\n            if (config && !connection._.pingIntervalId && config.pingInterval) {\r\n                connection._.pingIntervalId = window.setInterval(function () {\r\n                    signalR.transports._logic.pingServer(connection).fail(onFail);\r\n                }, config.pingInterval);\r\n            }\r\n        }\r\n    };\r\n\r\n    signalR.events = events;\r\n\r\n    signalR.resources = resources;\r\n\r\n    signalR.ajaxDefaults = ajaxDefaults;\r\n\r\n    signalR.changeState = changeState;\r\n\r\n    signalR.isDisconnecting = isDisconnecting;\r\n\r\n    signalR.connectionState = {\r\n        connecting: 0,\r\n        connected: 1,\r\n        reconnecting: 2,\r\n        disconnected: 4\r\n    };\r\n\r\n    signalR.hub = {\r\n        start: function () {\r\n            // This will get replaced with the real hub connection start method when hubs is referenced correctly\r\n            throw new Error(\"SignalR: Error loading hubs. Ensure your hubs reference is correct, e.g. <script src='/signalr/js'></script>.\");\r\n        }\r\n    };\r\n\r\n    // .on() was added in version 1.7.0, .load() was removed in version 3.0.0 so we fallback to .load() if .on() does\r\n    // not exist to not break existing applications\r\n    if (typeof _pageWindow.on == \"function\") {\r\n        _pageWindow.on(\"load\", function () { _pageLoaded = true; });\r\n    }\r\n    else {\r\n        _pageWindow.load(function () { _pageLoaded = true; });\r\n    }\r\n\r\n    function validateTransport(requestedTransport, connection) {\r\n        /// <summary>Validates the requested transport by cross checking it with the pre-defined signalR.transports</summary>\r\n        /// <param name=\"requestedTransport\" type=\"Object\">The designated transports that the user has specified.</param>\r\n        /// <param name=\"connection\" type=\"signalR\">The connection that will be using the requested transports.  Used for logging purposes.</param>\r\n        /// <returns type=\"Object\" />\r\n\r\n        if ($.isArray(requestedTransport)) {\r\n            // Go through transport array and remove an \"invalid\" tranports\r\n            for (var i = requestedTransport.length - 1; i >= 0; i--) {\r\n                var transport = requestedTransport[i];\r\n                if ($.type(transport) !== \"string\" || !signalR.transports[transport]) {\r\n                    connection.log(\"Invalid transport: \" + transport + \", removing it from the transports list.\");\r\n                    requestedTransport.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            // Verify we still have transports left, if we dont then we have invalid transports\r\n            if (requestedTransport.length === 0) {\r\n                connection.log(\"No transports remain within the specified transport array.\");\r\n                requestedTransport = null;\r\n            }\r\n        } else if (!signalR.transports[requestedTransport] && requestedTransport !== \"auto\") {\r\n            connection.log(\"Invalid transport: \" + requestedTransport.toString() + \".\");\r\n            requestedTransport = null;\r\n        } else if (requestedTransport === \"auto\" && signalR._.ieVersion <= 8) {\r\n            // If we're doing an auto transport and we're IE8 then force longPolling, #1764\r\n            return [\"longPolling\"];\r\n\r\n        }\r\n\r\n        return requestedTransport;\r\n    }\r\n\r\n    function getDefaultPort(protocol) {\r\n        if (protocol === \"http:\") {\r\n            return 80;\r\n        } else if (protocol === \"https:\") {\r\n            return 443;\r\n        }\r\n    }\r\n\r\n    function addDefaultPort(protocol, url) {\r\n        // Remove ports  from url.  We have to check if there's a / or end of line\r\n        // following the port in order to avoid removing ports such as 8080.\r\n        if (url.match(/:\\d+$/)) {\r\n            return url;\r\n        } else {\r\n            return url + \":\" + getDefaultPort(protocol);\r\n        }\r\n    }\r\n\r\n    function ConnectingMessageBuffer(connection, drainCallback) {\r\n        var that = this,\r\n            buffer = [];\r\n\r\n        that.tryBuffer = function (message) {\r\n            if (connection.state === $.signalR.connectionState.connecting) {\r\n                buffer.push(message);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        that.drain = function () {\r\n            // Ensure that the connection is connected when we drain (do not want to drain while a connection is not active)\r\n            if (connection.state === $.signalR.connectionState.connected) {\r\n                while (buffer.length > 0) {\r\n                    drainCallback(buffer.shift());\r\n                }\r\n            }\r\n        };\r\n\r\n        that.clear = function () {\r\n            buffer = [];\r\n        };\r\n    }\r\n\r\n    signalR.fn = signalR.prototype = {\r\n        init: function (url, qs, logging) {\r\n            var $connection = $(this);\r\n\r\n            this.url = url;\r\n            this.qs = qs;\r\n            this.lastError = null;\r\n            this._ = {\r\n                keepAliveData: {},\r\n                connectingMessageBuffer: new ConnectingMessageBuffer(this, function (message) {\r\n                    $connection.triggerHandler(events.onReceived, [message]);\r\n                }),\r\n                lastMessageAt: new Date().getTime(),\r\n                lastActiveAt: new Date().getTime(),\r\n                beatInterval: 5000, // Default value, will only be overridden if keep alive is enabled,\r\n                beatHandle: null,\r\n                totalTransportConnectTimeout: 0 // This will be the sum of the TransportConnectTimeout sent in response to negotiate and connection.transportConnectTimeout\r\n            };\r\n            if (typeof (logging) === \"boolean\") {\r\n                this.logging = logging;\r\n            }\r\n        },\r\n\r\n        _parseResponse: function (response) {\r\n            var that = this;\r\n\r\n            if (!response) {\r\n                return response;\r\n            } else if (typeof response === \"string\") {\r\n                return that.json.parse(response);\r\n            } else {\r\n                return response;\r\n            }\r\n        },\r\n\r\n        _originalJson: JSON,\r\n\r\n        json: JSON,\r\n\r\n        isCrossDomain: function (url, against) {\r\n            /// <summary>Checks if url is cross domain</summary>\r\n            /// <param name=\"url\" type=\"String\">The base URL</param>\r\n            /// <param name=\"against\" type=\"Object\">\r\n            ///     An optional argument to compare the URL against, if not specified it will be set to window.location.\r\n            ///     If specified it must contain a protocol and a host property.\r\n            /// </param>\r\n            var link;\r\n\r\n            url = $.trim(url);\r\n\r\n            against = against || window.location;\r\n\r\n            if (url.indexOf(\"http\") !== 0) {\r\n                return false;\r\n            }\r\n\r\n            // Create an anchor tag.\r\n            link = window.document.createElement(\"a\");\r\n            link.href = url;\r\n\r\n            // When checking for cross domain we have to special case port 80 because the window.location will remove the\r\n            return link.protocol + addDefaultPort(link.protocol, link.host) !== against.protocol + addDefaultPort(against.protocol, against.host);\r\n        },\r\n\r\n        ajaxDataType: \"text\",\r\n\r\n        contentType: \"application/json; charset=UTF-8\",\r\n\r\n        logging: false,\r\n\r\n        state: signalR.connectionState.disconnected,\r\n\r\n        clientProtocol: \"1.5\",\r\n\r\n        reconnectDelay: 2000,\r\n\r\n        transportConnectTimeout: 0,\r\n\r\n        disconnectTimeout: 30000, // This should be set by the server in response to the negotiate request (30s default)\r\n\r\n        reconnectWindow: 30000, // This should be set by the server in response to the negotiate request\r\n\r\n        keepAliveWarnAt: 2 / 3, // Warn user of slow connection if we breach the X% mark of the keep alive timeout\r\n\r\n        start: function (options, callback) {\r\n            /// <summary>Starts the connection</summary>\r\n            /// <param name=\"options\" type=\"Object\">Options map</param>\r\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection has started</param>\r\n            var connection = this,\r\n                config = {\r\n                    pingInterval: 300000,\r\n                    waitForPageLoad: true,\r\n                    transport: \"auto\",\r\n                    jsonp: false,\r\n                    callback: undefined\r\n                } as any,\r\n                initialize,\r\n                deferred = connection._deferral || $.Deferred(), // Check to see if there is a pre-existing deferral that's being built on, if so we want to keep using it\r\n                parser = window.document.createElement(\"a\");\r\n\r\n            connection.lastError = null;\r\n\r\n            // Persist the deferral so that if start is called multiple times the same deferral is used.\r\n            connection._deferral = deferred;\r\n\r\n            if (!connection.json) {\r\n                // no JSON!\r\n                throw new Error(\"SignalR: No JSON parser found. Please ensure json2.js is referenced before the SignalR.js file if you need to support clients without native JSON parsing support, e.g. IE<8.\");\r\n            }\r\n\r\n            if ($.type(options) === \"function\") {\r\n                // Support calling with single callback parameter\r\n                callback = options;\r\n            } else if ($.type(options) === \"object\") {\r\n                $.extend(config, options);\r\n                if ($.type(config.callback) === \"function\") {\r\n                    callback = config.callback;\r\n                }\r\n            }\r\n\r\n            config.transport = validateTransport(config.transport, connection);\r\n\r\n            // If the transport is invalid throw an error and abort start\r\n            if (!config.transport) {\r\n                throw new Error(\"SignalR: Invalid transport(s) specified, aborting start.\");\r\n            }\r\n\r\n            connection._.config = config;\r\n\r\n            // Check to see if start is being called prior to page load\r\n            // If waitForPageLoad is true we then want to re-direct function call to the window load event\r\n            if (!_pageLoaded && config.waitForPageLoad === true) {\r\n                connection._.deferredStartHandler = function () {\r\n                    connection.start(options, callback);\r\n                };\r\n                _pageWindow.bind(\"load\", connection._.deferredStartHandler);\r\n\r\n                return deferred.promise();\r\n            }\r\n\r\n            // If we're already connecting just return the same deferral as the original connection start\r\n            if (connection.state === signalR.connectionState.connecting) {\r\n                return deferred.promise();\r\n            } else if (changeState(connection,\r\n                signalR.connectionState.disconnected,\r\n                signalR.connectionState.connecting) === false) {\r\n                // We're not connecting so try and transition into connecting.\r\n                // If we fail to transition then we're either in connected or reconnecting.\r\n\r\n                deferred.resolve(connection);\r\n                return deferred.promise();\r\n            }\r\n\r\n            configureStopReconnectingTimeout(connection);\r\n\r\n            // Resolve the full url\r\n            parser.href = connection.url;\r\n            if (!parser.protocol || parser.protocol === \":\") {\r\n                connection.protocol = window.document.location.protocol;\r\n                connection.host = parser.host || window.document.location.host;\r\n            } else {\r\n                connection.protocol = parser.protocol;\r\n                connection.host = parser.host;\r\n            }\r\n\r\n            connection.baseUrl = connection.protocol + \"//\" + connection.host;\r\n\r\n            // Set the websocket protocol\r\n            connection.wsProtocol = connection.protocol === \"https:\" ? \"wss://\" : \"ws://\";\r\n\r\n            // If jsonp with no/auto transport is specified, then set the transport to long polling\r\n            // since that is the only transport for which jsonp really makes sense.\r\n            // Some developers might actually choose to specify jsonp for same origin requests\r\n            // as demonstrated by Issue #623.\r\n            if (config.transport === \"auto\" && config.jsonp === true) {\r\n                config.transport = \"longPolling\";\r\n            }\r\n\r\n            // If the url is protocol relative, prepend the current windows protocol to the url.\r\n            if (connection.url.indexOf(\"//\") === 0) {\r\n                connection.url = window.location.protocol + connection.url;\r\n                connection.log(\"Protocol relative URL detected, normalizing it to '\" + connection.url + \"'.\");\r\n            }\r\n\r\n            if (this.isCrossDomain(connection.url)) {\r\n                connection.log(\"Auto detected cross domain url.\");\r\n\r\n                if (config.transport === \"auto\") {\r\n                    // TODO: Support XDM with foreverFrame\r\n                    config.transport = [\"webSockets\", \"serverSentEvents\", \"longPolling\"];\r\n                }\r\n\r\n                if (typeof (config.withCredentials) === \"undefined\") {\r\n                    config.withCredentials = true;\r\n                }\r\n\r\n                // Determine if jsonp is the only choice for negotiation, ajaxSend and ajaxAbort.\r\n                // i.e. if the browser doesn't supports CORS\r\n                // If it is, ignore any preference to the contrary, and switch to jsonp.\r\n                if (!config.jsonp) {\r\n                    config.jsonp = !$.support.cors;\r\n\r\n                    if (config.jsonp) {\r\n                        connection.log(\"Using jsonp because this browser doesn't support CORS.\");\r\n                    }\r\n                }\r\n\r\n                connection.contentType = signalR._.defaultContentType;\r\n            }\r\n\r\n            connection.withCredentials = config.withCredentials;\r\n\r\n            connection.ajaxDataType = config.jsonp ? \"jsonp\" : \"text\";\r\n\r\n            $(connection).bind(events.onStart, function (e, data) {\r\n                if ($.type(callback) === \"function\") {\r\n                    callback.call(connection);\r\n                }\r\n                deferred.resolve(connection);\r\n            });\r\n\r\n            connection._.initHandler = signalR.transports._logic.initHandler(connection);\r\n\r\n            initialize = function (transports, index) {\r\n                var noTransportError = signalR._.error(resources.noTransportOnInit);\r\n\r\n                index = index || 0;\r\n                if (index >= transports.length) {\r\n                    if (index === 0) {\r\n                        connection.log(\"No transports supported by the server were selected.\");\r\n                    } else if (index === 1) {\r\n                        connection.log(\"No fallback transports were selected.\");\r\n                    } else {\r\n                        connection.log(\"Fallback transports exhausted.\");\r\n                    }\r\n\r\n                    // No transport initialized successfully\r\n                    $(connection).triggerHandler(events.onError, [noTransportError]);\r\n                    deferred.reject(noTransportError);\r\n                    // Stop the connection if it has connected and move it into the disconnected state\r\n                    connection.stop();\r\n                    return;\r\n                }\r\n\r\n                // The connection was aborted\r\n                if (connection.state === signalR.connectionState.disconnected) {\r\n                    return;\r\n                }\r\n\r\n                var transportName = transports[index],\r\n                    transport = signalR.transports[transportName],\r\n                    onFallback = function () {\r\n                        initialize(transports, index + 1);\r\n                    };\r\n\r\n                connection.transport = transport;\r\n\r\n                try {\r\n                    connection._.initHandler.start(transport, function () { // success\r\n                        // Firefox 11+ doesn't allow sync XHR withCredentials: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#withCredentials\r\n                        var isFirefox11OrGreater = signalR._.firefoxMajorVersion(window.navigator.userAgent) >= 11,\r\n                            asyncAbort = !!connection.withCredentials && isFirefox11OrGreater;\r\n\r\n                        connection.log(\"The start request succeeded. Transitioning to the connected state.\");\r\n\r\n                        if (supportsKeepAlive(connection)) {\r\n                            signalR.transports._logic.monitorKeepAlive(connection);\r\n                        }\r\n\r\n                        signalR.transports._logic.startHeartbeat(connection);\r\n\r\n                        // Used to ensure low activity clients maintain their authentication.\r\n                        // Must be configured once a transport has been decided to perform valid ping requests.\r\n                        signalR._.configurePingInterval(connection);\r\n\r\n                        if (!changeState(connection,\r\n                            signalR.connectionState.connecting,\r\n                            signalR.connectionState.connected)) {\r\n                            connection.log(\"WARNING! The connection was not in the connecting state.\");\r\n                        }\r\n\r\n                        // Drain any incoming buffered messages (messages that came in prior to connect)\r\n                        connection._.connectingMessageBuffer.drain();\r\n\r\n                        $(connection).triggerHandler(events.onStart);\r\n\r\n                        // wire the stop handler for when the user leaves the page\r\n                        _pageWindow.bind(\"unload\", function () {\r\n                            connection.log(\"Window unloading, stopping the connection.\");\r\n\r\n                            connection.stop(asyncAbort);\r\n                        });\r\n\r\n                        if (isFirefox11OrGreater) {\r\n                            // Firefox does not fire cross-domain XHRs in the normal unload handler on tab close.\r\n                            // #2400\r\n                            _pageWindow.bind(\"beforeunload\", function () {\r\n                                // If connection.stop() runs runs in beforeunload and fails, it will also fail\r\n                                // in unload unless connection.stop() runs after a timeout.\r\n                                window.setTimeout(function () {\r\n                                    connection.stop(asyncAbort);\r\n                                }, 0);\r\n                            });\r\n                        }\r\n                    }, onFallback);\r\n                }\r\n                catch (error) {\r\n                    connection.log(transport.name + \" transport threw '\" + error.message + \"' when attempting to start.\");\r\n                    onFallback();\r\n                }\r\n            };\r\n\r\n            var url = connection.url + \"/negotiate\",\r\n                onFailed = function (error, connection) {\r\n                    var err = signalR._.error(resources.errorOnNegotiate, error, connection._.negotiateRequest);\r\n\r\n                    $(connection).triggerHandler(events.onError, err);\r\n                    deferred.reject(err);\r\n                    // Stop the connection if negotiate failed\r\n                    connection.stop();\r\n                };\r\n\r\n            $(connection).triggerHandler(events.onStarting);\r\n\r\n            url = signalR.transports._logic.prepareQueryString(connection, url);\r\n\r\n            connection.log(\"Negotiating with '\" + url + \"'.\");\r\n\r\n            // Save the ajax negotiate request object so we can abort it if stop is called while the request is in flight.\r\n            connection._.negotiateRequest = signalR.transports._logic.ajax(connection, {\r\n                url: url,\r\n                error: function (error, statusText) {\r\n                    // We don't want to cause any errors if we're aborting our own negotiate request.\r\n                    if (statusText !== _negotiateAbortText) {\r\n                        onFailed(error, connection);\r\n                    } else {\r\n                        // This rejection will noop if the deferred has already been resolved or rejected.\r\n                        deferred.reject(signalR._.error(resources.stoppedWhileNegotiating, null /* error */, connection._.negotiateRequest));\r\n                    }\r\n                },\r\n                success: function (result) {\r\n                    var res,\r\n                        keepAliveData,\r\n                        protocolError,\r\n                        transports = [],\r\n                        supportedTransports = [];\r\n\r\n                    try {\r\n                        res = connection._parseResponse(result);\r\n                    } catch (error) {\r\n                        onFailed(signalR._.error(resources.errorParsingNegotiateResponse, error), connection);\r\n                        return;\r\n                    }\r\n\r\n                    keepAliveData = connection._.keepAliveData;\r\n                    connection.appRelativeUrl = res.Url;\r\n                    connection.id = res.ConnectionId;\r\n                    connection.token = res.ConnectionToken;\r\n                    connection.webSocketServerUrl = res.WebSocketServerUrl;\r\n\r\n                    // The long poll timeout is the ConnectionTimeout plus 10 seconds\r\n                    connection._.pollTimeout = res.ConnectionTimeout * 1000 + 10000; // in ms\r\n\r\n                    // Once the server has labeled the PersistentConnection as Disconnected, we should stop attempting to reconnect\r\n                    // after res.DisconnectTimeout seconds.\r\n                    connection.disconnectTimeout = res.DisconnectTimeout * 1000; // in ms\r\n\r\n                    // Add the TransportConnectTimeout from the response to the transportConnectTimeout from the client to calculate the total timeout\r\n                    connection._.totalTransportConnectTimeout = connection.transportConnectTimeout + res.TransportConnectTimeout * 1000;\r\n\r\n                    // If we have a keep alive\r\n                    if (res.KeepAliveTimeout) {\r\n                        // Register the keep alive data as activated\r\n                        keepAliveData.activated = true;\r\n\r\n                        // Timeout to designate when to force the connection into reconnecting converted to milliseconds\r\n                        keepAliveData.timeout = res.KeepAliveTimeout * 1000;\r\n\r\n                        // Timeout to designate when to warn the developer that the connection may be dead or is not responding.\r\n                        keepAliveData.timeoutWarning = keepAliveData.timeout * connection.keepAliveWarnAt;\r\n\r\n                        // Instantiate the frequency in which we check the keep alive.  It must be short in order to not miss/pick up any changes\r\n                        connection._.beatInterval = (keepAliveData.timeout - keepAliveData.timeoutWarning) / 3;\r\n                    } else {\r\n                        keepAliveData.activated = false;\r\n                    }\r\n\r\n                    connection.reconnectWindow = connection.disconnectTimeout + (keepAliveData.timeout || 0);\r\n\r\n                    if (!res.ProtocolVersion || res.ProtocolVersion !== connection.clientProtocol) {\r\n                        protocolError = signalR._.error(signalR._.format(resources.protocolIncompatible, connection.clientProtocol, res.ProtocolVersion));\r\n                        $(connection).triggerHandler(events.onError, [protocolError]);\r\n                        deferred.reject(protocolError);\r\n\r\n                        return;\r\n                    }\r\n\r\n                    $.each(signalR.transports, function (key) {\r\n                        if ((key.indexOf(\"_\") === 0) || (key === \"webSockets\" && !res.TryWebSockets)) {\r\n                            return true;\r\n                        }\r\n                        supportedTransports.push(key);\r\n                    });\r\n\r\n                    if ($.isArray(config.transport)) {\r\n                        $.each(config.transport, function (_, transport) {\r\n                            if ($.inArray(transport, supportedTransports) >= 0) {\r\n                                transports.push(transport);\r\n                            }\r\n                        });\r\n                    } else if (config.transport === \"auto\") {\r\n                        transports = supportedTransports;\r\n                    } else if ($.inArray(config.transport, supportedTransports) >= 0) {\r\n                        transports.push(config.transport);\r\n                    }\r\n\r\n                    initialize(transports);\r\n                }\r\n            });\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        starting: function (callback) {\r\n            /// <summary>Adds a callback that will be invoked before anything is sent over the connection</summary>\r\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute before the connection is fully instantiated.</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this;\r\n            $(connection).bind(events.onStarting, function (e, data) {\r\n                callback.call(connection);\r\n            });\r\n            return connection;\r\n        },\r\n\r\n        send: function (data) {\r\n            /// <summary>Sends data over the connection</summary>\r\n            /// <param name=\"data\" type=\"String\">The data to send over the connection</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this;\r\n\r\n            if (connection.state === signalR.connectionState.disconnected) {\r\n                // Connection hasn't been started yet\r\n                throw new Error(\"SignalR: Connection must be started before data can be sent. Call .start() before .send()\");\r\n            }\r\n\r\n            if (connection.state === signalR.connectionState.connecting) {\r\n                // Connection hasn't been started yet\r\n                throw new Error(\"SignalR: Connection has not been fully initialized. Use .start().done() or .start().fail() to run logic after the connection has started.\");\r\n            }\r\n\r\n            connection.transport.send(connection, data);\r\n            // REVIEW: Should we return deferred here?\r\n            return connection;\r\n        },\r\n\r\n        received: function (callback) {\r\n            /// <summary>Adds a callback that will be invoked after anything is received over the connection</summary>\r\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when any data is received on the connection</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this;\r\n            $(connection).bind(events.onReceived, function (e, data) {\r\n                callback.call(connection, data);\r\n            });\r\n            return connection;\r\n        },\r\n\r\n        stateChanged: function (callback) {\r\n            /// <summary>Adds a callback that will be invoked when the connection state changes</summary>\r\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection state changes</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this;\r\n            $(connection).bind(events.onStateChanged, function (e, data) {\r\n                callback.call(connection, data);\r\n            });\r\n            return connection;\r\n        },\r\n\r\n        error: function (callback) {\r\n            /// <summary>Adds a callback that will be invoked after an error occurs with the connection</summary>\r\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when an error occurs on the connection</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this;\r\n            $(connection).bind(events.onError, function (e, errorData, sendData) {\r\n                connection.lastError = errorData;\r\n                // In practice 'errorData' is the SignalR built error object.\r\n                // In practice 'sendData' is undefined for all error events except those triggered by\r\n                // 'ajaxSend' and 'webSockets.send'.'sendData' is the original send payload.\r\n                callback.call(connection, errorData, sendData);\r\n            });\r\n            return connection;\r\n        },\r\n\r\n        disconnected: function (callback) {\r\n            /// <summary>Adds a callback that will be invoked when the client disconnects</summary>\r\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection is broken</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this;\r\n            $(connection).bind(events.onDisconnect, function (e, data) {\r\n                callback.call(connection);\r\n            });\r\n            return connection;\r\n        },\r\n\r\n        connectionSlow: function (callback) {\r\n            /// <summary>Adds a callback that will be invoked when the client detects a slow connection</summary>\r\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection is slow</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this;\r\n            $(connection).bind(events.onConnectionSlow, function (e, data) {\r\n                callback.call(connection);\r\n            });\r\n\r\n            return connection;\r\n        },\r\n\r\n        reconnecting: function (callback) {\r\n            /// <summary>Adds a callback that will be invoked when the underlying transport begins reconnecting</summary>\r\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection enters a reconnecting state</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this;\r\n            $(connection).bind(events.onReconnecting, function (e, data) {\r\n                callback.call(connection);\r\n            });\r\n            return connection;\r\n        },\r\n\r\n        reconnected: function (callback) {\r\n            /// <summary>Adds a callback that will be invoked when the underlying transport reconnects</summary>\r\n            /// <param name=\"callback\" type=\"Function\">A callback function to execute when the connection is restored</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this;\r\n            $(connection).bind(events.onReconnect, function (e, data) {\r\n                callback.call(connection);\r\n            });\r\n            return connection;\r\n        },\r\n\r\n        stop: function (async, notifyServer) {\r\n            /// <summary>Stops listening</summary>\r\n            /// <param name=\"async\" type=\"Boolean\">Whether or not to asynchronously abort the connection</param>\r\n            /// <param name=\"notifyServer\" type=\"Boolean\">Whether we want to notify the server that we are aborting the connection</param>\r\n            /// <returns type=\"signalR\" />\r\n            var connection = this,\r\n                // Save deferral because this is always cleaned up\r\n                deferral = connection._deferral;\r\n\r\n            // Verify that we've bound a load event.\r\n            if (connection._.deferredStartHandler) {\r\n                // Unbind the event.\r\n                _pageWindow.unbind(\"load\", connection._.deferredStartHandler);\r\n            }\r\n\r\n            // Always clean up private non-timeout based state.\r\n            delete connection._.config;\r\n            delete connection._.deferredStartHandler;\r\n\r\n            // This needs to be checked despite the connection state because a connection start can be deferred until page load.\r\n            // If we've deferred the start due to a page load we need to unbind the \"onLoad\" -> start event.\r\n            if (!_pageLoaded && (!connection._.config || connection._.config.waitForPageLoad === true)) {\r\n                connection.log(\"Stopping connection prior to negotiate.\");\r\n\r\n                // If we have a deferral we should reject it\r\n                if (deferral) {\r\n                    deferral.reject(signalR._.error(resources.stoppedWhileLoading));\r\n                }\r\n\r\n                // Short-circuit because the start has not been fully started.\r\n                return;\r\n            }\r\n\r\n            if (connection.state === signalR.connectionState.disconnected) {\r\n                return;\r\n            }\r\n\r\n            connection.log(\"Stopping connection.\");\r\n\r\n            // Clear this no matter what\r\n            window.clearTimeout(connection._.beatHandle);\r\n            window.clearInterval(connection._.pingIntervalId);\r\n\r\n            if (connection.transport) {\r\n                connection.transport.stop(connection);\r\n\r\n                if (notifyServer !== false) {\r\n                    connection.transport.abort(connection, async);\r\n                }\r\n\r\n                if (supportsKeepAlive(connection)) {\r\n                    signalR.transports._logic.stopMonitoringKeepAlive(connection);\r\n                }\r\n\r\n                connection.transport = null;\r\n            }\r\n\r\n            if (connection._.negotiateRequest) {\r\n                // If the negotiation request has already completed this will noop.\r\n                connection._.negotiateRequest.abort(_negotiateAbortText);\r\n                delete connection._.negotiateRequest;\r\n            }\r\n\r\n            // Ensure that initHandler.stop() is called before connection._deferral is deleted\r\n            if (connection._.initHandler) {\r\n                connection._.initHandler.stop();\r\n            }\r\n\r\n            delete connection._deferral;\r\n            delete connection.messageId;\r\n            delete connection.groupsToken;\r\n            delete connection.id;\r\n            delete connection._.pingIntervalId;\r\n            delete connection._.lastMessageAt;\r\n            delete connection._.lastActiveAt;\r\n\r\n            // Clear out our message buffer\r\n            connection._.connectingMessageBuffer.clear();\r\n\r\n            // Trigger the disconnect event\r\n            changeState(connection, connection.state, signalR.connectionState.disconnected);\r\n            $(connection).triggerHandler(events.onDisconnect);\r\n\r\n            return connection;\r\n        },\r\n\r\n        log: function (msg) {\r\n            log(msg, this.logging);\r\n        }\r\n    };\r\n\r\n    signalR.fn.init.prototype = signalR.fn;\r\n\r\n    signalR.noConflict = function () {\r\n        /// <summary>Reinstates the original value of $.connection and returns the signalR object for manual assignment</summary>\r\n        /// <returns type=\"signalR\" />\r\n        if ($.connection === signalR) {\r\n            $.connection = _connection;\r\n        }\r\n        return signalR;\r\n    };\r\n\r\n    if ($.connection) {\r\n        _connection = $.connection;\r\n    }\r\n\r\n    $.connection = $.signalR = signalR;\r\n\r\n}(jQueryShim, window));\r\n/* jquery.signalR.transports.common.js */\r\n// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/*global window:false */\r\n/// <reference path=\"jquery.signalR.core.js\" />\r\n\r\n(function ($, window, undefined) {\r\n\r\n    var signalR = $.signalR,\r\n        events = $.signalR.events,\r\n        changeState = $.signalR.changeState,\r\n        startAbortText = \"__Start Aborted__\",\r\n        transportLogic;\r\n\r\n    signalR.transports = {};\r\n\r\n    function beat(connection) {\r\n        if (connection._.keepAliveData.monitoring) {\r\n            checkIfAlive(connection);\r\n        }\r\n\r\n        // Ensure that we successfully marked active before continuing the heartbeat.\r\n        if (transportLogic.markActive(connection)) {\r\n            connection._.beatHandle = window.setTimeout(function () {\r\n                beat(connection);\r\n            }, connection._.beatInterval);\r\n        }\r\n    }\r\n\r\n    function checkIfAlive(connection) {\r\n        var keepAliveData = connection._.keepAliveData,\r\n            timeElapsed;\r\n\r\n        // Only check if we're connected\r\n        if (connection.state === signalR.connectionState.connected) {\r\n            timeElapsed = new Date().getTime() - connection._.lastMessageAt;\r\n\r\n            // Check if the keep alive has completely timed out\r\n            if (timeElapsed >= keepAliveData.timeout) {\r\n                connection.log(\"Keep alive timed out.  Notifying transport that connection has been lost.\");\r\n\r\n                // Notify transport that the connection has been lost\r\n                connection.transport.lostConnection(connection);\r\n            } else if (timeElapsed >= keepAliveData.timeoutWarning) {\r\n                // This is to assure that the user only gets a single warning\r\n                if (!keepAliveData.userNotified) {\r\n                    connection.log(\"Keep alive has been missed, connection may be dead/slow.\");\r\n                    $(connection).triggerHandler(events.onConnectionSlow);\r\n                    keepAliveData.userNotified = true;\r\n                }\r\n            } else {\r\n                keepAliveData.userNotified = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAjaxUrl(connection, path) {\r\n        var url = connection.url + path;\r\n\r\n        if (connection.transport) {\r\n            url += \"?transport=\" + connection.transport.name;\r\n        }\r\n\r\n        return transportLogic.prepareQueryString(connection, url);\r\n    }\r\n\r\n    function InitHandler(connection) {\r\n        this.connection = connection;\r\n\r\n        this.startRequested = false;\r\n        this.startCompleted = false;\r\n        this.connectionStopped = false;\r\n    }\r\n\r\n    InitHandler.prototype = {\r\n        start: function (transport, onSuccess, onFallback) {\r\n            var that = this,\r\n                connection = that.connection,\r\n                failCalled = false;\r\n\r\n            if (that.startRequested || that.connectionStopped) {\r\n                connection.log(\"WARNING! \" + transport.name + \" transport cannot be started. Initialization ongoing or completed.\");\r\n                return;\r\n            }\r\n\r\n            connection.log(transport.name + \" transport starting.\");\r\n\r\n            transport.start(connection, function () {\r\n                if (!failCalled) {\r\n                    that.initReceived(transport, onSuccess);\r\n                }\r\n            }, function (error) {\r\n                // Don't allow the same transport to cause onFallback to be called twice\r\n                if (!failCalled) {\r\n                    failCalled = true;\r\n                    that.transportFailed(transport, error, onFallback);\r\n                }\r\n\r\n                // Returns true if the transport should stop;\r\n                // false if it should attempt to reconnect\r\n                return !that.startCompleted || that.connectionStopped;\r\n            });\r\n\r\n            that.transportTimeoutHandle = window.setTimeout(function () {\r\n                if (!failCalled) {\r\n                    failCalled = true;\r\n                    connection.log(transport.name + \" transport timed out when trying to connect.\");\r\n                    that.transportFailed(transport, undefined, onFallback);\r\n                }\r\n            }, connection._.totalTransportConnectTimeout);\r\n        },\r\n\r\n        stop: function () {\r\n            this.connectionStopped = true;\r\n            window.clearTimeout(this.transportTimeoutHandle);\r\n            signalR.transports._logic.tryAbortStartRequest(this.connection);\r\n        },\r\n\r\n        initReceived: function (transport, onSuccess) {\r\n            var that = this,\r\n                connection = that.connection;\r\n\r\n            if (that.startRequested) {\r\n                connection.log(\"WARNING! The client received multiple init messages.\");\r\n                return;\r\n            }\r\n\r\n            if (that.connectionStopped) {\r\n                return;\r\n            }\r\n\r\n            that.startRequested = true;\r\n            window.clearTimeout(that.transportTimeoutHandle);\r\n\r\n            connection.log(transport.name + \" transport connected. Initiating start request.\");\r\n            signalR.transports._logic.ajaxStart(connection, function () {\r\n                that.startCompleted = true;\r\n                onSuccess();\r\n            });\r\n        },\r\n\r\n        transportFailed: function (transport, error, onFallback) {\r\n            var connection = this.connection,\r\n                deferred = connection._deferral,\r\n                wrappedError;\r\n\r\n            if (this.connectionStopped) {\r\n                return;\r\n            }\r\n\r\n            window.clearTimeout(this.transportTimeoutHandle);\r\n\r\n            if (!this.startRequested) {\r\n                transport.stop(connection);\r\n\r\n                connection.log(transport.name + \" transport failed to connect. Attempting to fall back.\");\r\n                onFallback();\r\n            } else if (!this.startCompleted) {\r\n                // Do not attempt to fall back if a start request is ongoing during a transport failure.\r\n                // Instead, trigger an error and stop the connection.\r\n                wrappedError = signalR._.error(signalR.resources.errorDuringStartRequest, error);\r\n\r\n                connection.log(transport.name + \" transport failed during the start request. Stopping the connection.\");\r\n                $(connection).triggerHandler(events.onError, [wrappedError]);\r\n                if (deferred) {\r\n                    deferred.reject(wrappedError);\r\n                }\r\n\r\n                connection.stop();\r\n            } else {\r\n                // The start request has completed, but the connection has not stopped.\r\n                // No need to do anything here. The transport should attempt its normal reconnect logic.\r\n            }\r\n        }\r\n    };\r\n\r\n    transportLogic = signalR.transports._logic = {\r\n        ajax: function (connection, options) {\r\n            return $.ajax(\r\n                $.extend(/*deep copy*/ true, {}, $.signalR.ajaxDefaults, {\r\n                    type: \"GET\",\r\n                    data: {},\r\n                    xhrFields: { withCredentials: connection.withCredentials },\r\n                    contentType: connection.contentType,\r\n                    dataType: connection.ajaxDataType\r\n                }, options));\r\n        },\r\n\r\n        pingServer: function (connection) {\r\n            /// <summary>Pings the server</summary>\r\n            /// <param name=\"connection\" type=\"signalr\">Connection associated with the server ping</param>\r\n            /// <returns type=\"signalR\" />\r\n            var url,\r\n                xhr,\r\n                deferral = $.Deferred();\r\n\r\n            if (connection.transport) {\r\n                url = connection.url + \"/ping\";\r\n\r\n                url = transportLogic.addQs(url, connection.qs);\r\n\r\n                xhr = transportLogic.ajax(connection, {\r\n                    url: url,\r\n                    success: function (result) {\r\n                        var data;\r\n\r\n                        try {\r\n                            data = connection._parseResponse(result);\r\n                        }\r\n                        catch (error) {\r\n                            deferral.reject(\r\n                                signalR._.transportError(\r\n                                    signalR.resources.pingServerFailedParse,\r\n                                    connection.transport,\r\n                                    error,\r\n                                    xhr\r\n                                )\r\n                            );\r\n                            connection.stop();\r\n                            return;\r\n                        }\r\n\r\n                        if (data.Response === \"pong\") {\r\n                            deferral.resolve();\r\n                        }\r\n                        else {\r\n                            deferral.reject(\r\n                                signalR._.transportError(\r\n                                    signalR._.format(signalR.resources.pingServerFailedInvalidResponse, result),\r\n                                    connection.transport,\r\n                                    null /* error */,\r\n                                    xhr\r\n                                )\r\n                            );\r\n                        }\r\n                    },\r\n                    error: function (error) {\r\n                        if (error.status === 401 || error.status === 403) {\r\n                            deferral.reject(\r\n                                signalR._.transportError(\r\n                                    signalR._.format(signalR.resources.pingServerFailedStatusCode, error.status),\r\n                                    connection.transport,\r\n                                    error,\r\n                                    xhr\r\n                                )\r\n                            );\r\n                            connection.stop();\r\n                        }\r\n                        else {\r\n                            deferral.reject(\r\n                                signalR._.transportError(\r\n                                    signalR.resources.pingServerFailed,\r\n                                    connection.transport,\r\n                                    error,\r\n                                    xhr\r\n                                )\r\n                            );\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                deferral.reject(\r\n                    signalR._.transportError(\r\n                        signalR.resources.noConnectionTransport,\r\n                        connection.transport\r\n                    )\r\n                );\r\n            }\r\n\r\n            return deferral.promise();\r\n        },\r\n\r\n        prepareQueryString: function (connection, url) {\r\n            var preparedUrl;\r\n\r\n            // Use addQs to start since it handles the ?/& prefix for us\r\n            preparedUrl = transportLogic.addQs(url, \"clientProtocol=\" + connection.clientProtocol);\r\n\r\n            // Add the user-specified query string params if any\r\n            preparedUrl = transportLogic.addQs(preparedUrl, connection.qs);\r\n\r\n            if (connection.token) {\r\n                preparedUrl += \"&connectionToken=\" + encodeURIComponent(connection.token);\r\n            }\r\n\r\n            if (connection.data) {\r\n                preparedUrl += \"&connectionData=\" + encodeURIComponent(connection.data);\r\n            }\r\n\r\n            return preparedUrl;\r\n        },\r\n\r\n        addQs: function (url, qs) {\r\n            var appender = url.indexOf(\"?\") !== -1 ? \"&\" : \"?\",\r\n                firstChar;\r\n\r\n            if (!qs) {\r\n                return url;\r\n            }\r\n\r\n            if (typeof (qs) === \"object\") {\r\n                return url + appender + $.param(qs);\r\n            }\r\n\r\n            if (typeof (qs) === \"string\") {\r\n                firstChar = qs.charAt(0);\r\n\r\n                if (firstChar === \"?\" || firstChar === \"&\") {\r\n                    appender = \"\";\r\n                }\r\n\r\n                return url + appender + qs;\r\n            }\r\n\r\n            throw new Error(\"Query string property must be either a string or object.\");\r\n        },\r\n\r\n        // BUG #2953: The url needs to be same otherwise it will cause a memory leak\r\n        getUrl: function (connection, transport, reconnecting, poll, ajaxPost) {\r\n            /// <summary>Gets the url for making a GET based connect request</summary>\r\n            var baseUrl = transport === \"webSockets\" ? \"\" : connection.baseUrl,\r\n                url = baseUrl + connection.appRelativeUrl,\r\n                qs = \"transport=\" + transport;\r\n\r\n            if (!ajaxPost && connection.groupsToken) {\r\n                qs += \"&groupsToken=\" + encodeURIComponent(connection.groupsToken);\r\n            }\r\n\r\n            if (!reconnecting) {\r\n                url += \"/connect\";\r\n            } else {\r\n                if (poll) {\r\n                    // longPolling transport specific\r\n                    url += \"/poll\";\r\n                } else {\r\n                    url += \"/reconnect\";\r\n                }\r\n\r\n                if (!ajaxPost && connection.messageId) {\r\n                    qs += \"&messageId=\" + encodeURIComponent(connection.messageId);\r\n                }\r\n            }\r\n            url += \"?\" + qs;\r\n            url = transportLogic.prepareQueryString(connection, url);\r\n\r\n            if (!ajaxPost) {\r\n                url += \"&tid=\" + Math.floor(Math.random() * 11);\r\n            }\r\n\r\n            return url;\r\n        },\r\n\r\n        maximizePersistentResponse: function (minPersistentResponse) {\r\n            return {\r\n                MessageId: minPersistentResponse.C,\r\n                Messages: minPersistentResponse.M,\r\n                Initialized: typeof (minPersistentResponse.S) !== \"undefined\" ? true : false,\r\n                ShouldReconnect: typeof (minPersistentResponse.T) !== \"undefined\" ? true : false,\r\n                LongPollDelay: minPersistentResponse.L,\r\n                GroupsToken: minPersistentResponse.G\r\n            };\r\n        },\r\n\r\n        updateGroups: function (connection, groupsToken) {\r\n            if (groupsToken) {\r\n                connection.groupsToken = groupsToken;\r\n            }\r\n        },\r\n\r\n        stringifySend: function (connection, message) {\r\n            if (typeof (message) === \"string\" || typeof (message) === \"undefined\" || message === null) {\r\n                return message;\r\n            }\r\n            return connection.json.stringify(message);\r\n        },\r\n\r\n        ajaxSend: function (connection, data) {\r\n            var payload = transportLogic.stringifySend(connection, data),\r\n                url = getAjaxUrl(connection, \"/send\"),\r\n                xhr,\r\n                onFail = function (error, connection) {\r\n                    $(connection).triggerHandler(events.onError, [signalR._.transportError(signalR.resources.sendFailed, connection.transport, error, xhr), data]);\r\n                };\r\n\r\n\r\n            xhr = transportLogic.ajax(connection, {\r\n                url: url,\r\n                type: connection.ajaxDataType === \"jsonp\" ? \"GET\" : \"POST\",\r\n                contentType: signalR._.defaultContentType,\r\n                data: {\r\n                    data: payload\r\n                },\r\n                success: function (result) {\r\n                    var res;\r\n\r\n                    if (result) {\r\n                        try {\r\n                            res = connection._parseResponse(result);\r\n                        }\r\n                        catch (error) {\r\n                            onFail(error, connection);\r\n                            connection.stop();\r\n                            return;\r\n                        }\r\n\r\n                        transportLogic.triggerReceived(connection, res);\r\n                    }\r\n                },\r\n                error: function (error, textStatus) {\r\n                    if (textStatus === \"abort\" || textStatus === \"parsererror\") {\r\n                        // The parsererror happens for sends that don't return any data, and hence\r\n                        // don't write the jsonp callback to the response. This is harder to fix on the server\r\n                        // so just hack around it on the client for now.\r\n                        return;\r\n                    }\r\n\r\n                    onFail(error, connection);\r\n                }\r\n            });\r\n\r\n            return xhr;\r\n        },\r\n\r\n        ajaxAbort: function (connection, async) {\r\n            if (typeof (connection.transport) === \"undefined\") {\r\n                return;\r\n            }\r\n\r\n            // Async by default unless explicitly overidden\r\n            async = typeof async === \"undefined\" ? true : async;\r\n\r\n            var url = getAjaxUrl(connection, \"/abort\");\r\n\r\n            transportLogic.ajax(connection, {\r\n                url: url,\r\n                async: async,\r\n                timeout: 1000,\r\n                type: \"POST\"\r\n            });\r\n\r\n            connection.log(\"Fired ajax abort async = \" + async + \".\");\r\n        },\r\n\r\n        ajaxStart: function (connection, onSuccess) {\r\n            var rejectDeferred = function (error) {\r\n                var deferred = connection._deferral;\r\n                if (deferred) {\r\n                    deferred.reject(error);\r\n                }\r\n            },\r\n                triggerStartError = function (error) {\r\n                    connection.log(\"The start request failed. Stopping the connection.\");\r\n                    $(connection).triggerHandler(events.onError, [error]);\r\n                    rejectDeferred(error);\r\n                    connection.stop();\r\n                };\r\n\r\n            connection._.startRequest = transportLogic.ajax(connection, {\r\n                url: getAjaxUrl(connection, \"/start\"),\r\n                success: function (result, statusText, xhr) {\r\n                    var data;\r\n\r\n                    try {\r\n                        data = connection._parseResponse(result);\r\n                    } catch (error) {\r\n                        triggerStartError(signalR._.error(\r\n                            signalR._.format(signalR.resources.errorParsingStartResponse, result),\r\n                            error, xhr));\r\n                        return;\r\n                    }\r\n\r\n                    if (data.Response === \"started\") {\r\n                        onSuccess();\r\n                    } else {\r\n                        triggerStartError(signalR._.error(\r\n                            signalR._.format(signalR.resources.invalidStartResponse, result),\r\n                            null /* error */, xhr));\r\n                    }\r\n                },\r\n                error: function (xhr, statusText, error) {\r\n                    if (statusText !== startAbortText) {\r\n                        triggerStartError(signalR._.error(\r\n                            signalR.resources.errorDuringStartRequest,\r\n                            error, xhr));\r\n                    } else {\r\n                        // Stop has been called, no need to trigger the error handler\r\n                        // or stop the connection again with onStartError\r\n                        connection.log(\"The start request aborted because connection.stop() was called.\");\r\n                        rejectDeferred(signalR._.error(\r\n                            signalR.resources.stoppedDuringStartRequest,\r\n                            null /* error */, xhr));\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        tryAbortStartRequest: function (connection) {\r\n            if (connection._.startRequest) {\r\n                // If the start request has already completed this will noop.\r\n                connection._.startRequest.abort(startAbortText);\r\n                delete connection._.startRequest;\r\n            }\r\n        },\r\n\r\n        tryInitialize: function (connection, persistentResponse, onInitialized) {\r\n            if (persistentResponse.Initialized && onInitialized) {\r\n                onInitialized();\r\n            } else if (persistentResponse.Initialized) {\r\n                connection.log(\"WARNING! The client received an init message after reconnecting.\");\r\n            }\r\n\r\n        },\r\n\r\n        triggerReceived: function (connection, data) {\r\n            if (!connection._.connectingMessageBuffer.tryBuffer(data)) {\r\n                $(connection).triggerHandler(events.onReceived, [data]);\r\n            }\r\n        },\r\n\r\n        processMessages: function (connection, minData, onInitialized) {\r\n            var data;\r\n\r\n            // Update the last message time stamp\r\n            transportLogic.markLastMessage(connection);\r\n\r\n            if (minData) {\r\n                data = transportLogic.maximizePersistentResponse(minData);\r\n\r\n                transportLogic.updateGroups(connection, data.GroupsToken);\r\n\r\n                if (data.MessageId) {\r\n                    connection.messageId = data.MessageId;\r\n                }\r\n\r\n                if (data.Messages) {\r\n                    $.each(data.Messages, function (index, message) {\r\n                        transportLogic.triggerReceived(connection, message);\r\n                    });\r\n\r\n                    transportLogic.tryInitialize(connection, data, onInitialized);\r\n                }\r\n            }\r\n        },\r\n\r\n        monitorKeepAlive: function (connection) {\r\n            var keepAliveData = connection._.keepAliveData;\r\n\r\n            // If we haven't initiated the keep alive timeouts then we need to\r\n            if (!keepAliveData.monitoring) {\r\n                keepAliveData.monitoring = true;\r\n\r\n                transportLogic.markLastMessage(connection);\r\n\r\n                // Save the function so we can unbind it on stop\r\n                connection._.keepAliveData.reconnectKeepAliveUpdate = function () {\r\n                    // Mark a new message so that keep alive doesn't time out connections\r\n                    transportLogic.markLastMessage(connection);\r\n                };\r\n\r\n                // Update Keep alive on reconnect\r\n                $(connection).bind(events.onReconnect, connection._.keepAliveData.reconnectKeepAliveUpdate);\r\n\r\n                connection.log(\"Now monitoring keep alive with a warning timeout of \" + keepAliveData.timeoutWarning + \", keep alive timeout of \" + keepAliveData.timeout + \" and disconnecting timeout of \" + connection.disconnectTimeout);\r\n            } else {\r\n                connection.log(\"Tried to monitor keep alive but it's already being monitored.\");\r\n            }\r\n        },\r\n\r\n        stopMonitoringKeepAlive: function (connection) {\r\n            var keepAliveData = connection._.keepAliveData;\r\n\r\n            // Only attempt to stop the keep alive monitoring if its being monitored\r\n            if (keepAliveData.monitoring) {\r\n                // Stop monitoring\r\n                keepAliveData.monitoring = false;\r\n\r\n                // Remove the updateKeepAlive function from the reconnect event\r\n                $(connection).unbind(events.onReconnect, connection._.keepAliveData.reconnectKeepAliveUpdate);\r\n\r\n                // Clear all the keep alive data\r\n                connection._.keepAliveData = {};\r\n                connection.log(\"Stopping the monitoring of the keep alive.\");\r\n            }\r\n        },\r\n\r\n        startHeartbeat: function (connection) {\r\n            connection._.lastActiveAt = new Date().getTime();\r\n            beat(connection);\r\n        },\r\n\r\n        markLastMessage: function (connection) {\r\n            connection._.lastMessageAt = new Date().getTime();\r\n        },\r\n\r\n        markActive: function (connection) {\r\n            if (transportLogic.verifyLastActive(connection)) {\r\n                connection._.lastActiveAt = new Date().getTime();\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        isConnectedOrReconnecting: function (connection) {\r\n            return connection.state === signalR.connectionState.connected ||\r\n                connection.state === signalR.connectionState.reconnecting;\r\n        },\r\n\r\n        ensureReconnectingState: function (connection) {\r\n            if (changeState(connection,\r\n                signalR.connectionState.connected,\r\n                signalR.connectionState.reconnecting) === true) {\r\n                $(connection).triggerHandler(events.onReconnecting);\r\n            }\r\n            return connection.state === signalR.connectionState.reconnecting;\r\n        },\r\n\r\n        clearReconnectTimeout: function (connection) {\r\n            if (connection && connection._.reconnectTimeout) {\r\n                window.clearTimeout(connection._.reconnectTimeout);\r\n                delete connection._.reconnectTimeout;\r\n            }\r\n        },\r\n\r\n        verifyLastActive: function (connection) {\r\n            if (new Date().getTime() - connection._.lastActiveAt >= connection.reconnectWindow) {\r\n                var message = signalR._.format(signalR.resources.reconnectWindowTimeout, new Date(connection._.lastActiveAt), connection.reconnectWindow);\r\n                connection.log(message);\r\n                $(connection).triggerHandler(events.onError, [signalR._.error(message, /* source */ \"TimeoutException\")]);\r\n                connection.stop(/* async */ false, /* notifyServer */ false);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        reconnect: function (connection, transportName) {\r\n            var transport = signalR.transports[transportName];\r\n\r\n            // We should only set a reconnectTimeout if we are currently connected\r\n            // and a reconnectTimeout isn't already set.\r\n            if (transportLogic.isConnectedOrReconnecting(connection) && !connection._.reconnectTimeout) {\r\n                // Need to verify before the setTimeout occurs because an application sleep could occur during the setTimeout duration.\r\n                if (!transportLogic.verifyLastActive(connection)) {\r\n                    return;\r\n                }\r\n\r\n                connection._.reconnectTimeout = window.setTimeout(function () {\r\n                    if (!transportLogic.verifyLastActive(connection)) {\r\n                        return;\r\n                    }\r\n\r\n                    transport.stop(connection);\r\n\r\n                    if (transportLogic.ensureReconnectingState(connection)) {\r\n                        connection.log(transportName + \" reconnecting.\");\r\n                        transport.start(connection);\r\n                    }\r\n                }, connection.reconnectDelay);\r\n            }\r\n        },\r\n\r\n        handleParseFailure: function (connection, result, error, onFailed, context) {\r\n            var wrappedError = signalR._.transportError(\r\n                signalR._.format(signalR.resources.parseFailed, result),\r\n                connection.transport,\r\n                error,\r\n                context);\r\n\r\n            // If we're in the initialization phase trigger onFailed, otherwise stop the connection.\r\n            if (onFailed && onFailed(wrappedError)) {\r\n                connection.log(\"Failed to parse server response while attempting to connect.\");\r\n            } else {\r\n                $(connection).triggerHandler(events.onError, [wrappedError]);\r\n                connection.stop();\r\n            }\r\n        },\r\n\r\n        initHandler: function (connection) {\r\n            return new InitHandler(connection);\r\n        },\r\n\r\n        foreverFrame: {\r\n            count: 0,\r\n            connections: {}\r\n        }\r\n    };\r\n\r\n}(jQueryShim, window));\r\n/* jquery.signalR.transports.webSockets.js */\r\n// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n\r\n/*global window:false */\r\n/// <reference path=\"jquery.signalR.transports.common.js\" />\r\n\r\n(function ($, window, undefined) {\r\n\r\n    var signalR = $.signalR,\r\n        events = $.signalR.events,\r\n        changeState = $.signalR.changeState,\r\n        transportLogic = signalR.transports._logic;\r\n\r\n    signalR.transports.webSockets = {\r\n        name: \"webSockets\",\r\n\r\n        supportsKeepAlive: function () {\r\n            return true;\r\n        },\r\n\r\n        send: function (connection, data) {\r\n            var payload = transportLogic.stringifySend(connection, data);\r\n\r\n            try {\r\n                connection.socket.send(payload);\r\n            } catch (ex) {\r\n                $(connection).triggerHandler(events.onError,\r\n                    [signalR._.transportError(\r\n                        signalR.resources.webSocketsInvalidState,\r\n                        connection.transport,\r\n                        ex,\r\n                        connection.socket\r\n                    ),\r\n                        data]);\r\n            }\r\n        },\r\n\r\n        start: function (connection, onSuccess, onFailed) {\r\n            var url,\r\n                opened = false,\r\n                that = this,\r\n                reconnecting = !onSuccess,\r\n                $connection = $(connection);\r\n\r\n            if (!(window as any).WebSocket) {\r\n                onFailed();\r\n                return;\r\n            }\r\n\r\n            if (!connection.socket) {\r\n                if (connection.webSocketServerUrl) {\r\n                    url = connection.webSocketServerUrl;\r\n                } else {\r\n                    url = connection.wsProtocol + connection.host;\r\n                }\r\n\r\n                url += transportLogic.getUrl(connection, this.name, reconnecting);\r\n\r\n                connection.log(\"Connecting to websocket endpoint '\" + url + \"'.\");\r\n                connection.socket = new WebSocket(url);\r\n\r\n                connection.socket.onopen = function () {\r\n                    opened = true;\r\n                    connection.log(\"Websocket opened.\");\r\n\r\n                    transportLogic.clearReconnectTimeout(connection);\r\n\r\n                    if (changeState(connection,\r\n                        signalR.connectionState.reconnecting,\r\n                        signalR.connectionState.connected) === true) {\r\n                        $connection.triggerHandler(events.onReconnect);\r\n                    }\r\n                };\r\n\r\n                connection.socket.onclose = function (event) {\r\n                    var error;\r\n\r\n                    // Only handle a socket close if the close is from the current socket.\r\n                    // Sometimes on disconnect the server will push down an onclose event\r\n                    // to an expired socket.\r\n\r\n                    if (this === connection.socket) {\r\n                        if (opened && typeof event.wasClean !== \"undefined\" && event.wasClean === false) {\r\n                            // Ideally this would use the websocket.onerror handler (rather than checking wasClean in onclose) but\r\n                            // I found in some circumstances Chrome won't call onerror. This implementation seems to work on all browsers.\r\n                            error = signalR._.transportError(\r\n                                signalR.resources.webSocketClosed,\r\n                                connection.transport,\r\n                                event);\r\n\r\n                            connection.log(\"Unclean disconnect from websocket: \" + (event.reason || \"[no reason given].\"));\r\n                        } else {\r\n                            connection.log(\"Websocket closed.\");\r\n                        }\r\n\r\n                        if (!onFailed || !onFailed(error)) {\r\n                            if (error) {\r\n                                $(connection).triggerHandler(events.onError, [error]);\r\n                            }\r\n\r\n                            that.reconnect(connection);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                connection.socket.onmessage = function (event) {\r\n                    var data;\r\n\r\n                    try {\r\n                        data = connection._parseResponse(event.data);\r\n                    }\r\n                    catch (error) {\r\n                        transportLogic.handleParseFailure(connection, event.data, error, onFailed, event);\r\n                        return;\r\n                    }\r\n\r\n                    if (data) {\r\n                        // data.M is PersistentResponse.Messages\r\n                        if ($.isEmptyObject(data) || data.M) {\r\n                            transportLogic.processMessages(connection, data, onSuccess);\r\n                        } else {\r\n                            // For websockets we need to trigger onReceived\r\n                            // for callbacks to outgoing hub calls.\r\n                            transportLogic.triggerReceived(connection, data);\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        },\r\n\r\n        reconnect: function (connection) {\r\n            transportLogic.reconnect(connection, this.name);\r\n        },\r\n\r\n        lostConnection: function (connection) {\r\n            this.reconnect(connection);\r\n        },\r\n\r\n        stop: function (connection) {\r\n            // Don't trigger a reconnect after stopping\r\n            transportLogic.clearReconnectTimeout(connection);\r\n\r\n            if (connection.socket) {\r\n                connection.log(\"Closing the Websocket.\");\r\n                connection.socket.close();\r\n                connection.socket = null;\r\n            }\r\n        },\r\n\r\n        abort: function (connection, async) {\r\n            transportLogic.ajaxAbort(connection, async);\r\n        }\r\n    };\r\n\r\n}(jQueryShim, window));\r\n/* jquery.signalR.transports.serverSentEvents.js */\r\n// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n\r\n/*global window:false */\r\n/// <reference path=\"jquery.signalR.transports.common.js\" />\r\n\r\n(function ($, window, undefined) {\r\n\r\n    var signalR = $.signalR,\r\n        events = $.signalR.events,\r\n        changeState = $.signalR.changeState,\r\n        transportLogic = signalR.transports._logic,\r\n        clearReconnectAttemptTimeout = function (connection) {\r\n            window.clearTimeout(connection._.reconnectAttemptTimeoutHandle);\r\n            delete connection._.reconnectAttemptTimeoutHandle;\r\n        };\r\n\r\n    signalR.transports.serverSentEvents = {\r\n        name: \"serverSentEvents\",\r\n\r\n        supportsKeepAlive: function () {\r\n            return true;\r\n        },\r\n\r\n        timeOut: 3000,\r\n\r\n        start: function (connection, onSuccess, onFailed) {\r\n            var that = this,\r\n                opened = false,\r\n                $connection = $(connection),\r\n                reconnecting = !onSuccess,\r\n                url;\r\n\r\n            if (connection.eventSource) {\r\n                connection.log(\"The connection already has an event source. Stopping it.\");\r\n                connection.stop();\r\n            }\r\n\r\n            if (!(window as any).EventSource) {\r\n                if (onFailed) {\r\n                    connection.log(\"This browser doesn't support SSE.\");\r\n                    onFailed();\r\n                }\r\n                return;\r\n            }\r\n\r\n            url = transportLogic.getUrl(connection, this.name, reconnecting);\r\n\r\n            try {\r\n                connection.log(\"Attempting to connect to SSE endpoint '\" + url + \"'.\");\r\n                connection.eventSource = new EventSource(url, { withCredentials: connection.withCredentials });\r\n            }\r\n            catch (e) {\r\n                connection.log(\"EventSource failed trying to connect with error \" + e.Message + \".\");\r\n                if (onFailed) {\r\n                    // The connection failed, call the failed callback\r\n                    onFailed();\r\n                } else {\r\n                    $connection.triggerHandler(events.onError, [signalR._.transportError(signalR.resources.eventSourceFailedToConnect, connection.transport, e)]);\r\n                    if (reconnecting) {\r\n                        // If we were reconnecting, rather than doing initial connect, then try reconnect again\r\n                        that.reconnect(connection);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (reconnecting) {\r\n                connection._.reconnectAttemptTimeoutHandle = window.setTimeout(function () {\r\n                    if (opened === false) {\r\n                        // If we're reconnecting and the event source is attempting to connect,\r\n                        // don't keep retrying. This causes duplicate connections to spawn.\r\n                        if (connection.eventSource.readyState !== EventSource.OPEN) {\r\n                            // If we were reconnecting, rather than doing initial connect, then try reconnect again\r\n                            that.reconnect(connection);\r\n                        }\r\n                    }\r\n                },\r\n                    that.timeOut);\r\n            }\r\n\r\n            connection.eventSource.addEventListener(\"open\", function (e) {\r\n                connection.log(\"EventSource connected.\");\r\n\r\n                clearReconnectAttemptTimeout(connection);\r\n                transportLogic.clearReconnectTimeout(connection);\r\n\r\n                if (opened === false) {\r\n                    opened = true;\r\n\r\n                    if (changeState(connection,\r\n                        signalR.connectionState.reconnecting,\r\n                        signalR.connectionState.connected) === true) {\r\n                        $connection.triggerHandler(events.onReconnect);\r\n                    }\r\n                }\r\n            }, false);\r\n\r\n            connection.eventSource.addEventListener(\"message\", function (e) {\r\n                var res;\r\n\r\n                // process messages\r\n                if (e.data === \"initialized\") {\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    res = connection._parseResponse(e.data);\r\n                }\r\n                catch (error) {\r\n                    transportLogic.handleParseFailure(connection, e.data, error, onFailed, e);\r\n                    return;\r\n                }\r\n\r\n                transportLogic.processMessages(connection, res, onSuccess);\r\n            }, false);\r\n\r\n            connection.eventSource.addEventListener(\"error\", function (e) {\r\n                var error = signalR._.transportError(\r\n                    signalR.resources.eventSourceError,\r\n                    connection.transport,\r\n                    e);\r\n\r\n                // Only handle an error if the error is from the current Event Source.\r\n                // Sometimes on disconnect the server will push down an error event\r\n                // to an expired Event Source.\r\n                if (this !== connection.eventSource) {\r\n                    return;\r\n                }\r\n\r\n                if (onFailed && onFailed(error)) {\r\n                    return;\r\n                }\r\n\r\n                connection.log(\"EventSource readyState: \" + connection.eventSource.readyState + \".\");\r\n\r\n                if (e.eventPhase === EventSource.CLOSED) {\r\n                    // We don't use the EventSource's native reconnect function as it\r\n                    // doesn't allow us to change the URL when reconnecting. We need\r\n                    // to change the URL to not include the /connect suffix, and pass\r\n                    // the last message id we received.\r\n                    connection.log(\"EventSource reconnecting due to the server connection ending.\");\r\n                    that.reconnect(connection);\r\n                } else {\r\n                    // connection error\r\n                    connection.log(\"EventSource error.\");\r\n                    $connection.triggerHandler(events.onError, [error]);\r\n                }\r\n            }, false);\r\n        },\r\n\r\n        reconnect: function (connection) {\r\n            transportLogic.reconnect(connection, this.name);\r\n        },\r\n\r\n        lostConnection: function (connection) {\r\n            this.reconnect(connection);\r\n        },\r\n\r\n        send: function (connection, data) {\r\n            transportLogic.ajaxSend(connection, data);\r\n        },\r\n\r\n        stop: function (connection) {\r\n            // Don't trigger a reconnect after stopping\r\n            clearReconnectAttemptTimeout(connection);\r\n            transportLogic.clearReconnectTimeout(connection);\r\n\r\n            if (connection && connection.eventSource) {\r\n                connection.log(\"EventSource calling close().\");\r\n                connection.eventSource.close();\r\n                connection.eventSource = null;\r\n                delete connection.eventSource;\r\n            }\r\n        },\r\n\r\n        abort: function (connection, async) {\r\n            transportLogic.ajaxAbort(connection, async);\r\n        }\r\n    };\r\n\r\n}(jQueryShim, window));\r\n/* jquery.signalR.transports.foreverFrame.js */\r\n// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n\r\n/*global window:false */\r\n/// <reference path=\"jquery.signalR.transports.common.js\" />\r\n\r\n(function ($, window, undefined) {\r\n\r\n    var signalR = $.signalR,\r\n        events = $.signalR.events,\r\n        changeState = $.signalR.changeState,\r\n        transportLogic = signalR.transports._logic,\r\n        createFrame = function () {\r\n            var frame = window.document.createElement(\"iframe\");\r\n            frame.setAttribute(\"style\", \"position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;\");\r\n            return frame;\r\n        },\r\n        // Used to prevent infinite loading icon spins in older versions of ie\r\n        // We build this object inside a closure so we don't pollute the rest of\r\n        // the foreverFrame transport with unnecessary functions/utilities.\r\n        loadPreventer = (function () {\r\n            var loadingFixIntervalId = null,\r\n                loadingFixInterval = 1000,\r\n                attachedTo = 0;\r\n\r\n            return {\r\n                prevent: function () {\r\n                    // Prevent additional iframe removal procedures from newer browsers\r\n                    if (signalR._.ieVersion <= 8) {\r\n                        // We only ever want to set the interval one time, so on the first attachedTo\r\n                        if (attachedTo === 0) {\r\n                            // Create and destroy iframe every 3 seconds to prevent loading icon, super hacky\r\n                            loadingFixIntervalId = window.setInterval(function () {\r\n                                var tempFrame = createFrame();\r\n\r\n                                window.document.body.appendChild(tempFrame);\r\n                                window.document.body.removeChild(tempFrame);\r\n\r\n                                tempFrame = null;\r\n                            }, loadingFixInterval);\r\n                        }\r\n\r\n                        attachedTo++;\r\n                    }\r\n                },\r\n                cancel: function () {\r\n                    // Only clear the interval if there's only one more object that the loadPreventer is attachedTo\r\n                    if (attachedTo === 1) {\r\n                        window.clearInterval(loadingFixIntervalId);\r\n                    }\r\n\r\n                    if (attachedTo > 0) {\r\n                        attachedTo--;\r\n                    }\r\n                }\r\n            };\r\n        })();\r\n\r\n    signalR.transports.foreverFrame = {\r\n        name: \"foreverFrame\",\r\n\r\n        supportsKeepAlive: function () {\r\n            return true;\r\n        },\r\n\r\n        // Added as a value here so we can create tests to verify functionality\r\n        iframeClearThreshold: 50,\r\n\r\n        start: function (connection, onSuccess, onFailed) {\r\n            var that = this,\r\n                frameId = (transportLogic.foreverFrame.count += 1),\r\n                url,\r\n                frame = createFrame(),\r\n                frameLoadHandler = function () {\r\n                    connection.log(\"Forever frame iframe finished loading and is no longer receiving messages.\");\r\n                    if (!onFailed || !onFailed()) {\r\n                        that.reconnect(connection);\r\n                    }\r\n                };\r\n\r\n            if ((window as any).EventSource) {\r\n                // If the browser supports SSE, don't use Forever Frame\r\n                if (onFailed) {\r\n                    connection.log(\"Forever Frame is not supported by SignalR on browsers with SSE support.\");\r\n                    onFailed();\r\n                }\r\n                return;\r\n            }\r\n\r\n            frame.setAttribute(\"data-signalr-connection-id\", connection.id);\r\n\r\n            // Start preventing loading icon\r\n            // This will only perform work if the loadPreventer is not attached to another connection.\r\n            loadPreventer.prevent();\r\n\r\n            // Build the url\r\n            url = transportLogic.getUrl(connection, this.name);\r\n            url += \"&frameId=\" + frameId;\r\n\r\n            // add frame to the document prior to setting URL to avoid caching issues.\r\n            window.document.documentElement.appendChild(frame);\r\n\r\n            connection.log(\"Binding to iframe's load event.\");\r\n\r\n            if (frame.addEventListener) {\r\n                frame.addEventListener(\"load\", frameLoadHandler, false);\r\n            } \r\n\r\n            frame.src = url;\r\n            transportLogic.foreverFrame.connections[frameId] = connection;\r\n\r\n            connection.frame = frame;\r\n            connection.frameId = frameId;\r\n\r\n            if (onSuccess) {\r\n                connection.onSuccess = function () {\r\n                    connection.log(\"Iframe transport started.\");\r\n                    onSuccess();\r\n                };\r\n            }\r\n        },\r\n\r\n        reconnect: function (connection) {\r\n            var that = this;\r\n\r\n            // Need to verify connection state and verify before the setTimeout occurs because an application sleep could occur during the setTimeout duration.\r\n            if (transportLogic.isConnectedOrReconnecting(connection) && transportLogic.verifyLastActive(connection)) {\r\n                window.setTimeout(function () {\r\n                    // Verify that we're ok to reconnect.\r\n                    if (!transportLogic.verifyLastActive(connection)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (connection.frame && transportLogic.ensureReconnectingState(connection)) {\r\n                        var frame = connection.frame,\r\n                            src = transportLogic.getUrl(connection, that.name, true) + \"&frameId=\" + connection.frameId;\r\n                        connection.log(\"Updating iframe src to '\" + src + \"'.\");\r\n                        frame.src = src;\r\n                    }\r\n                }, connection.reconnectDelay);\r\n            }\r\n        },\r\n\r\n        lostConnection: function (connection) {\r\n            this.reconnect(connection);\r\n        },\r\n\r\n        send: function (connection, data) {\r\n            transportLogic.ajaxSend(connection, data);\r\n        },\r\n\r\n        receive: function (connection, data) {\r\n            var cw,\r\n                body,\r\n                response;\r\n\r\n            if (connection.json !== connection._originalJson) {\r\n                // If there's a custom JSON parser configured then serialize the object\r\n                // using the original (browser) JSON parser and then deserialize it using\r\n                // the custom parser (connection._parseResponse does that). This is so we\r\n                // can easily send the response from the server as \"raw\" JSON but still\r\n                // support custom JSON deserialization in the browser.\r\n                data = connection._originalJson.stringify(data);\r\n            }\r\n\r\n            response = connection._parseResponse(data);\r\n\r\n            transportLogic.processMessages(connection, response, connection.onSuccess);\r\n\r\n            // Protect against connection stopping from a callback trigger within the processMessages above.\r\n            if (connection.state === $.signalR.connectionState.connected) {\r\n                // Delete the script & div elements\r\n                connection.frameMessageCount = (connection.frameMessageCount || 0) + 1;\r\n                if (connection.frameMessageCount > signalR.transports.foreverFrame.iframeClearThreshold) {\r\n                    connection.frameMessageCount = 0;\r\n                    cw = connection.frame.contentWindow || connection.frame.contentDocument;\r\n                    if (cw && cw.document && cw.document.body) {\r\n                        body = cw.document.body;\r\n\r\n                        // Remove all the child elements from the iframe's body to conserver memory\r\n                        while (body.firstChild) {\r\n                            body.removeChild(body.firstChild);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        stop: function (connection) {\r\n            var cw = null;\r\n\r\n            // Stop attempting to prevent loading icon\r\n            loadPreventer.cancel();\r\n\r\n            if (connection.frame) {\r\n                if (connection.frame.stop) {\r\n                    connection.frame.stop();\r\n                } else {\r\n                    try {\r\n                        cw = connection.frame.contentWindow || connection.frame.contentDocument;\r\n                        if (cw.document && cw.document.execCommand) {\r\n                            cw.document.execCommand(\"Stop\");\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        connection.log(\"Error occurred when stopping foreverFrame transport. Message = \" + e.message + \".\");\r\n                    }\r\n                }\r\n\r\n                // Ensure the iframe is where we left it\r\n                if (connection.frame.parentNode === window.document.body) {\r\n                    window.document.body.removeChild(connection.frame);\r\n                }\r\n\r\n                delete transportLogic.foreverFrame.connections[connection.frameId];\r\n                connection.frame = null;\r\n                connection.frameId = null;\r\n                delete connection.frame;\r\n                delete connection.frameId;\r\n                delete connection.onSuccess;\r\n                delete connection.frameMessageCount;\r\n                connection.log(\"Stopping forever frame.\");\r\n            }\r\n        },\r\n\r\n        abort: function (connection, async) {\r\n            transportLogic.ajaxAbort(connection, async);\r\n        },\r\n\r\n        getConnection: function (id) {\r\n            return transportLogic.foreverFrame.connections[id];\r\n        },\r\n\r\n        started: function (connection) {\r\n            if (changeState(connection,\r\n                signalR.connectionState.reconnecting,\r\n                signalR.connectionState.connected) === true) {\r\n\r\n                $(connection).triggerHandler(events.onReconnect);\r\n            }\r\n        }\r\n    };\r\n\r\n}(jQueryShim, window));\r\n/* jquery.signalR.transports.longPolling.js */\r\n// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n\r\n/*global window:false */\r\n/// <reference path=\"jquery.signalR.transports.common.js\" />\r\n\r\n(function ($, window, undefined) {\r\n\r\n    var signalR = $.signalR,\r\n        events = $.signalR.events,\r\n        changeState = $.signalR.changeState,\r\n        isDisconnecting = $.signalR.isDisconnecting,\r\n        transportLogic = signalR.transports._logic;\r\n\r\n    signalR.transports.longPolling = {\r\n        name: \"longPolling\",\r\n\r\n        supportsKeepAlive: function () {\r\n            return false;\r\n        },\r\n\r\n        reconnectDelay: 3000,\r\n\r\n        start: function (connection, onSuccess, onFailed) {\r\n            /// <summary>Starts the long polling connection</summary>\r\n            /// <param name=\"connection\" type=\"signalR\">The SignalR connection to start</param>\r\n            var that = this,\r\n                fireConnect = function () {\r\n                    fireConnect = $.noop;\r\n\r\n                    connection.log(\"LongPolling connected.\");\r\n\r\n                    if (onSuccess) {\r\n                        onSuccess();\r\n                    } else {\r\n                        connection.log(\"WARNING! The client received an init message after reconnecting.\");\r\n                    }\r\n                },\r\n                tryFailConnect = function (error) {\r\n                    if (onFailed(error)) {\r\n                        connection.log(\"LongPolling failed to connect.\");\r\n                        return true;\r\n                    }\r\n\r\n                    return false;\r\n                },\r\n                privateData = connection._,\r\n                reconnectErrors = 0,\r\n                fireReconnected = function (instance) {\r\n                    window.clearTimeout(privateData.reconnectTimeoutId);\r\n                    privateData.reconnectTimeoutId = null;\r\n\r\n                    if (changeState(instance,\r\n                        signalR.connectionState.reconnecting,\r\n                        signalR.connectionState.connected) === true) {\r\n                        // Successfully reconnected!\r\n                        instance.log(\"Raising the reconnect event\");\r\n                        $(instance).triggerHandler(events.onReconnect);\r\n                    }\r\n                },\r\n                // 1 hour\r\n                maxFireReconnectedTimeout = 3600000;\r\n\r\n            if (connection.pollXhr) {\r\n                connection.log(\"Polling xhr requests already exists, aborting.\");\r\n                connection.stop();\r\n            }\r\n\r\n            connection.messageId = null;\r\n\r\n            privateData.reconnectTimeoutId = null;\r\n\r\n            privateData.pollTimeoutId = window.setTimeout(function () {\r\n                (function poll(instance, raiseReconnect) {\r\n                    var messageId = instance.messageId,\r\n                        connect = (messageId === null),\r\n                        reconnecting = !connect,\r\n                        polling = !raiseReconnect,\r\n                        url = transportLogic.getUrl(instance, that.name, reconnecting, polling, true /* use Post for longPolling */),\r\n                        postData = {} as any;\r\n\r\n                    if (instance.messageId) {\r\n                        postData.messageId = instance.messageId;\r\n                    }\r\n\r\n                    if (instance.groupsToken) {\r\n                        postData.groupsToken = instance.groupsToken;\r\n                    }\r\n\r\n                    // If we've disconnected during the time we've tried to re-instantiate the poll then stop.\r\n                    if (isDisconnecting(instance) === true) {\r\n                        return;\r\n                    }\r\n\r\n                    connection.log(\"Opening long polling request to '\" + url + \"'.\");\r\n                    instance.pollXhr = transportLogic.ajax(connection, {\r\n                        xhrFields: {\r\n                            onprogress: function () {\r\n                                transportLogic.markLastMessage(connection);\r\n                            }\r\n                        },\r\n                        url: url,\r\n                        type: \"POST\",\r\n                        contentType: signalR._.defaultContentType,\r\n                        data: postData,\r\n                        timeout: connection._.pollTimeout,\r\n                        success: function (result) {\r\n                            var minData,\r\n                                delay = 0,\r\n                                data,\r\n                                shouldReconnect;\r\n\r\n                            connection.log(\"Long poll complete.\");\r\n\r\n                            // Reset our reconnect errors so if we transition into a reconnecting state again we trigger\r\n                            // reconnected quickly\r\n                            reconnectErrors = 0;\r\n\r\n                            try {\r\n                                // Remove any keep-alives from the beginning of the result\r\n                                minData = connection._parseResponse(result);\r\n                            }\r\n                            catch (error) {\r\n                                transportLogic.handleParseFailure(instance, result, error, tryFailConnect, instance.pollXhr);\r\n                                return;\r\n                            }\r\n\r\n                            // If there's currently a timeout to trigger reconnect, fire it now before processing messages\r\n                            if (privateData.reconnectTimeoutId !== null) {\r\n                                fireReconnected(instance);\r\n                            }\r\n\r\n                            if (minData) {\r\n                                data = transportLogic.maximizePersistentResponse(minData);\r\n                            }\r\n\r\n                            transportLogic.processMessages(instance, minData, fireConnect);\r\n\r\n                            if (data &&\r\n                                $.type(data.LongPollDelay) === \"number\") {\r\n                                delay = data.LongPollDelay;\r\n                            }\r\n\r\n                            if (isDisconnecting(instance) === true) {\r\n                                return;\r\n                            }\r\n\r\n                            shouldReconnect = data && data.ShouldReconnect;\r\n                            if (shouldReconnect) {\r\n                                // Transition into the reconnecting state\r\n                                // If this fails then that means that the user transitioned the connection into a invalid state in processMessages.\r\n                                if (!transportLogic.ensureReconnectingState(instance)) {\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            // We never want to pass a raiseReconnect flag after a successful poll.  This is handled via the error function\r\n                            if (delay > 0) {\r\n                                privateData.pollTimeoutId = window.setTimeout(function () {\r\n                                    poll(instance, shouldReconnect);\r\n                                }, delay);\r\n                            } else {\r\n                                poll(instance, shouldReconnect);\r\n                            }\r\n                        },\r\n\r\n                        error: function (data, textStatus) {\r\n                            var error = signalR._.transportError(signalR.resources.longPollFailed, connection.transport, data, instance.pollXhr);\r\n\r\n                            // Stop trying to trigger reconnect, connection is in an error state\r\n                            // If we're not in the reconnect state this will noop\r\n                            window.clearTimeout(privateData.reconnectTimeoutId);\r\n                            privateData.reconnectTimeoutId = null;\r\n\r\n                            if (textStatus === \"abort\") {\r\n                                connection.log(\"Aborted xhr request.\");\r\n                                return;\r\n                            }\r\n\r\n                            if (!tryFailConnect(error)) {\r\n\r\n                                // Increment our reconnect errors, we assume all errors to be reconnect errors\r\n                                // In the case that it's our first error this will cause Reconnect to be fired\r\n                                // after 1 second due to reconnectErrors being = 1.\r\n                                reconnectErrors++;\r\n\r\n                                if (connection.state !== signalR.connectionState.reconnecting) {\r\n                                    connection.log(\"An error occurred using longPolling. Status = \" + textStatus + \".  Response = \" + data.responseText + \".\");\r\n                                    $(instance).triggerHandler(events.onError, [error]);\r\n                                }\r\n\r\n                                // We check the state here to verify that we're not in an invalid state prior to verifying Reconnect.\r\n                                // If we're not in connected or reconnecting then the next ensureReconnectingState check will fail and will return.\r\n                                // Therefore we don't want to change that failure code path.\r\n                                if ((connection.state === signalR.connectionState.connected ||\r\n                                    connection.state === signalR.connectionState.reconnecting) &&\r\n                                    !transportLogic.verifyLastActive(connection)) {\r\n                                    return;\r\n                                }\r\n\r\n                                // Transition into the reconnecting state\r\n                                // If this fails then that means that the user transitioned the connection into the disconnected or connecting state within the above error handler trigger.\r\n                                if (!transportLogic.ensureReconnectingState(instance)) {\r\n                                    return;\r\n                                }\r\n\r\n                                // Call poll with the raiseReconnect flag as true after the reconnect delay\r\n                                privateData.pollTimeoutId = window.setTimeout(function () {\r\n                                    poll(instance, true);\r\n                                }, that.reconnectDelay);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    // This will only ever pass after an error has occurred via the poll ajax procedure.\r\n                    if (reconnecting && raiseReconnect === true) {\r\n                        // We wait to reconnect depending on how many times we've failed to reconnect.\r\n                        // This is essentially a heuristic that will exponentially increase in wait time before\r\n                        // triggering reconnected.  This depends on the \"error\" handler of Poll to cancel this\r\n                        // timeout if it triggers before the Reconnected event fires.\r\n                        // The Math.min at the end is to ensure that the reconnect timeout does not overflow.\r\n                        privateData.reconnectTimeoutId = window.setTimeout(function () { fireReconnected(instance); }, Math.min(1000 * (Math.pow(2, reconnectErrors) - 1), maxFireReconnectedTimeout));\r\n                    }\r\n                }(connection));\r\n            }, 250); // Have to delay initial poll so Chrome doesn't show loader spinner in tab\r\n        },\r\n\r\n        lostConnection: function (connection) {\r\n            if (connection.pollXhr) {\r\n                connection.pollXhr.abort(\"lostConnection\");\r\n            }\r\n        },\r\n\r\n        send: function (connection, data) {\r\n            transportLogic.ajaxSend(connection, data);\r\n        },\r\n\r\n        stop: function (connection) {\r\n            /// <summary>Stops the long polling connection</summary>\r\n            /// <param name=\"connection\" type=\"signalR\">The SignalR connection to stop</param>\r\n\r\n            window.clearTimeout(connection._.pollTimeoutId);\r\n            window.clearTimeout(connection._.reconnectTimeoutId);\r\n\r\n            delete connection._.pollTimeoutId;\r\n            delete connection._.reconnectTimeoutId;\r\n\r\n            if (connection.pollXhr) {\r\n                connection.pollXhr.abort();\r\n                connection.pollXhr = null;\r\n                delete connection.pollXhr;\r\n            }\r\n        },\r\n\r\n        abort: function (connection, async) {\r\n            transportLogic.ajaxAbort(connection, async);\r\n        }\r\n    };\r\n\r\n}(jQueryShim, window));\r\n/* jquery.signalR.hubs.js */\r\n// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/*global window:false */\r\n/// <reference path=\"jquery.signalR.core.js\" />\r\n\r\n(function ($, window, undefined) {\r\n\r\n    var eventNamespace = \".hubProxy\",\r\n        signalR = $.signalR;\r\n\r\n    function makeEventName(event) {\r\n        return event + eventNamespace;\r\n    }\r\n\r\n    // Equivalent to Array.prototype.map\r\n    function map(arr, fun, thisp?) {\r\n        var i,\r\n            length = arr.length,\r\n            result = [];\r\n        for (i = 0; i < length; i += 1) {\r\n            if (arr.hasOwnProperty(i)) {\r\n                result[i] = fun.call(thisp, arr[i], i, arr);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getArgValue(a) {\r\n        return $.isFunction(a) ? null : ($.type(a) === \"undefined\" ? null : a);\r\n    }\r\n\r\n    function hasMembers(obj) {\r\n        for (var key in obj) {\r\n            // If we have any properties in our callback map then we have callbacks and can exit the loop via return\r\n            if (obj.hasOwnProperty(key)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function clearInvocationCallbacks(connection, error) {\r\n        /// <param name=\"connection\" type=\"hubConnection\" />\r\n        var callbacks = connection._.invocationCallbacks,\r\n            callback;\r\n\r\n        if (hasMembers(callbacks)) {\r\n            connection.log(\"Clearing hub invocation callbacks with error: \" + error + \".\");\r\n        }\r\n\r\n        // Reset the callback cache now as we have a local var referencing it\r\n        connection._.invocationCallbackId = 0;\r\n        delete connection._.invocationCallbacks;\r\n        connection._.invocationCallbacks = {};\r\n\r\n        // Loop over the callbacks and invoke them.\r\n        // We do this using a local var reference and *after* we've cleared the cache\r\n        // so that if a fail callback itself tries to invoke another method we don't\r\n        // end up with its callback in the list we're looping over.\r\n        for (var callbackId in callbacks) {\r\n            callback = callbacks[callbackId];\r\n            callback.method.call(callback.scope, { E: error });\r\n        }\r\n    }\r\n\r\n    // hubProxy\r\n    function hubProxy(hubConnection, hubName) {\r\n        /// <summary>\r\n        ///     Creates a new proxy object for the given hub connection that can be used to invoke\r\n        ///     methods on server hubs and handle client method invocation requests from the server.\r\n        /// </summary>\r\n        return new hubProxy.fn.init(hubConnection, hubName);\r\n    }\r\n\r\n    hubProxy.fn = hubProxy.prototype = {\r\n        init: function (connection, hubName) {\r\n            this.state = {};\r\n            this.connection = connection;\r\n            this.hubName = hubName;\r\n            this._ = {\r\n                callbackMap: {}\r\n            };\r\n        },\r\n\r\n        constructor: hubProxy,\r\n\r\n        hasSubscriptions: function () {\r\n            return hasMembers(this._.callbackMap);\r\n        },\r\n\r\n        on: function (eventName, callback) {\r\n            /// <summary>Wires up a callback to be invoked when a invocation request is received from the server hub.</summary>\r\n            /// <param name=\"eventName\" type=\"String\">The name of the hub event to register the callback for.</param>\r\n            /// <param name=\"callback\" type=\"Function\">The callback to be invoked.</param>\r\n            var that = this,\r\n                callbackMap = that._.callbackMap;\r\n\r\n            // Normalize the event name to lowercase\r\n            eventName = eventName.toLowerCase();\r\n\r\n            // If there is not an event registered for this callback yet we want to create its event space in the callback map.\r\n            if (!callbackMap[eventName]) {\r\n                callbackMap[eventName] = {};\r\n            }\r\n\r\n            // Map the callback to our encompassed function\r\n            callbackMap[eventName][callback] = function (e, data) {\r\n                callback.apply(that, data);\r\n            };\r\n\r\n            $(that).bind(makeEventName(eventName), callbackMap[eventName][callback]);\r\n\r\n            return that;\r\n        },\r\n\r\n        off: function (eventName, callback) {\r\n            /// <summary>Removes the callback invocation request from the server hub for the given event name.</summary>\r\n            /// <param name=\"eventName\" type=\"String\">The name of the hub event to unregister the callback for.</param>\r\n            /// <param name=\"callback\" type=\"Function\">The callback to be invoked.</param>\r\n            var that = this,\r\n                callbackMap = that._.callbackMap,\r\n                callbackSpace;\r\n\r\n            // Normalize the event name to lowercase\r\n            eventName = eventName.toLowerCase();\r\n\r\n            callbackSpace = callbackMap[eventName];\r\n\r\n            // Verify that there is an event space to unbind\r\n            if (callbackSpace) {\r\n                // Only unbind if there's an event bound with eventName and a callback with the specified callback\r\n                if (callbackSpace[callback]) {\r\n                    $(that).unbind(makeEventName(eventName), callbackSpace[callback]);\r\n\r\n                    // Remove the callback from the callback map\r\n                    delete callbackSpace[callback];\r\n\r\n                    // Check if there are any members left on the event, if not we need to destroy it.\r\n                    if (!hasMembers(callbackSpace)) {\r\n                        delete callbackMap[eventName];\r\n                    }\r\n                } else if (!callback) { // Check if we're removing the whole event and we didn't error because of an invalid callback\r\n                    $(that).unbind(makeEventName(eventName));\r\n\r\n                    delete callbackMap[eventName];\r\n                }\r\n            }\r\n\r\n            return that;\r\n        },\r\n\r\n        invoke: function (methodName) {\r\n            /// <summary>Invokes a server hub method with the given arguments.</summary>\r\n            /// <param name=\"methodName\" type=\"String\">The name of the server hub method.</param>\r\n\r\n            var that = this,\r\n                connection = that.connection,\r\n                args = $.makeArray(arguments).slice(1),\r\n                argValues = map(args, getArgValue),\r\n                data = { H: that.hubName, M: methodName, A: argValues, I: connection._.invocationCallbackId, S:null },\r\n                d = $.Deferred(),\r\n                callback = function (minResult) {\r\n                    var result = that._maximizeHubResponse(minResult),\r\n                        source,\r\n                        error;\r\n\r\n                    // Update the hub state\r\n                    $.extend(that.state, result.State);\r\n\r\n                    if (result.Progress) {\r\n                        if (d.notifyWith) {\r\n                            // Progress is only supported in jQuery 1.7+\r\n                            d.notifyWith(that, [result.Progress.Data]);\r\n                        } else if (!connection._.progressjQueryVersionLogged) {\r\n                            connection.log(\"A hub method invocation progress update was received but the version of jQuery in use (\" + $.prototype.jquery + \") does not support progress updates. Upgrade to jQuery 1.7+ to receive progress notifications.\");\r\n                            connection._.progressjQueryVersionLogged = true;\r\n                        }\r\n                    } else if (result.Error) {\r\n                        // Server hub method threw an exception, log it & reject the deferred\r\n                        if (result.StackTrace) {\r\n                            connection.log(result.Error + \"\\n\" + result.StackTrace + \".\");\r\n                        }\r\n\r\n                        // result.ErrorData is only set if a HubException was thrown\r\n                        source = result.IsHubException ? \"HubException\" : \"Exception\";\r\n                        error = signalR._.error(result.Error, source);\r\n                        error.data = result.ErrorData;\r\n\r\n                        connection.log(that.hubName + \".\" + methodName + \" failed to execute. Error: \" + error.message);\r\n                        d.rejectWith(that, [error]);\r\n                    } else {\r\n                        // Server invocation succeeded, resolve the deferred\r\n                        connection.log(\"Invoked \" + that.hubName + \".\" + methodName);\r\n                        d.resolveWith(that, [result.Result]);\r\n                    }\r\n                };\r\n\r\n            connection._.invocationCallbacks[connection._.invocationCallbackId.toString()] = { scope: that, method: callback };\r\n            connection._.invocationCallbackId += 1;\r\n\r\n            if (!$.isEmptyObject(that.state)) {\r\n                data.S = that.state;\r\n            }\r\n\r\n            connection.log(\"Invoking \" + that.hubName + \".\" + methodName);\r\n            connection.send(data);\r\n\r\n            return d.promise();\r\n        },\r\n\r\n        _maximizeHubResponse: function (minHubResponse) {\r\n            return {\r\n                State: minHubResponse.S,\r\n                Result: minHubResponse.R,\r\n                Progress: minHubResponse.P ? {\r\n                    Id: minHubResponse.P.I,\r\n                    Data: minHubResponse.P.D\r\n                } : null,\r\n                Id: minHubResponse.I,\r\n                IsHubException: minHubResponse.H,\r\n                Error: minHubResponse.E,\r\n                StackTrace: minHubResponse.T,\r\n                ErrorData: minHubResponse.D\r\n            };\r\n        }\r\n    };\r\n\r\n    hubProxy.fn.init.prototype = hubProxy.fn;\r\n\r\n    // hubConnection\r\n    function hubConnection(url, options) {\r\n        /// <summary>Creates a new hub connection.</summary>\r\n        /// <param name=\"url\" type=\"String\">[Optional] The hub route url, defaults to \"/signalr\".</param>\r\n        /// <param name=\"options\" type=\"Object\">[Optional] Settings to use when creating the hubConnection.</param>\r\n        var settings = {\r\n            qs: null,\r\n            logging: false,\r\n            useDefaultPath: true\r\n        };\r\n\r\n        $.extend(settings, options);\r\n\r\n        if (!url || settings.useDefaultPath) {\r\n            url = (url || \"\") + \"/signalr\";\r\n        }\r\n        return new hubConnection.fn.init(url, settings);\r\n    }\r\n\r\n    hubConnection.fn = hubConnection.prototype = $.connection();\r\n\r\n    hubConnection.fn.init = function (url, options) {\r\n        var settings = {\r\n            qs: null,\r\n            logging: false,\r\n            useDefaultPath: true\r\n        },\r\n            connection = this;\r\n\r\n        $.extend(settings, options);\r\n\r\n        // Call the base constructor\r\n        $.signalR.fn.init.call(connection, url, settings.qs, settings.logging);\r\n\r\n        // Object to store hub proxies for this connection\r\n        connection.proxies = {};\r\n\r\n        connection._.invocationCallbackId = 0;\r\n        connection._.invocationCallbacks = {};\r\n\r\n        // Wire up the received handler\r\n        connection.received(function (minData) {\r\n            var data, proxy, dataCallbackId, callback, hubName, eventName;\r\n            if (!minData) {\r\n                return;\r\n            }\r\n\r\n            // We have to handle progress updates first in order to ensure old clients that receive\r\n            // progress updates enter the return value branch and then no-op when they can't find\r\n            // the callback in the map (because the minData.I value will not be a valid callback ID)\r\n            if (typeof (minData.P) !== \"undefined\") {\r\n                // Process progress notification\r\n                dataCallbackId = minData.P.I.toString();\r\n                callback = connection._.invocationCallbacks[dataCallbackId];\r\n                if (callback) {\r\n                    callback.method.call(callback.scope, minData);\r\n                }\r\n            } else if (typeof (minData.I) !== \"undefined\") {\r\n                // We received the return value from a server method invocation, look up callback by id and call it\r\n                dataCallbackId = minData.I.toString();\r\n                callback = connection._.invocationCallbacks[dataCallbackId];\r\n                if (callback) {\r\n                    // Delete the callback from the proxy\r\n                    connection._.invocationCallbacks[dataCallbackId] = null;\r\n                    delete connection._.invocationCallbacks[dataCallbackId];\r\n\r\n                    // Invoke the callback\r\n                    callback.method.call(callback.scope, minData);\r\n                }\r\n            } else {\r\n                data = this._maximizeClientHubInvocation(minData);\r\n\r\n                // We received a client invocation request, i.e. broadcast from server hub\r\n                connection.log(\"Triggering client hub event '\" + data.Method + \"' on hub '\" + data.Hub + \"'.\");\r\n\r\n                // Normalize the names to lowercase\r\n                hubName = data.Hub.toLowerCase();\r\n                eventName = data.Method.toLowerCase();\r\n\r\n                // Trigger the local invocation event\r\n                proxy = this.proxies[hubName];\r\n\r\n                // Update the hub state\r\n                $.extend(proxy.state, data.State);\r\n                $(proxy).triggerHandler(makeEventName(eventName), [data.Args]);\r\n            }\r\n        });\r\n\r\n        connection.error(function (errData, origData) {\r\n            var callbackId, callback;\r\n\r\n            if (!origData) {\r\n                // No original data passed so this is not a send error\r\n                return;\r\n            }\r\n\r\n            callbackId = origData.I;\r\n            callback = connection._.invocationCallbacks[callbackId];\r\n\r\n            // Verify that there is a callback bound (could have been cleared)\r\n            if (callback) {\r\n                // Delete the callback\r\n                connection._.invocationCallbacks[callbackId] = null;\r\n                delete connection._.invocationCallbacks[callbackId];\r\n\r\n                // Invoke the callback with an error to reject the promise\r\n                callback.method.call(callback.scope, { E: errData });\r\n            }\r\n        });\r\n\r\n        connection.reconnecting(function () {\r\n            if (connection.transport && connection.transport.name === \"webSockets\") {\r\n                clearInvocationCallbacks(connection, \"Connection started reconnecting before invocation result was received.\");\r\n            }\r\n        });\r\n\r\n        connection.disconnected(function () {\r\n            clearInvocationCallbacks(connection, \"Connection was disconnected before invocation result was received.\");\r\n        });\r\n    };\r\n\r\n    hubConnection.fn._maximizeClientHubInvocation = function (minClientHubInvocation) {\r\n        return {\r\n            Hub: minClientHubInvocation.H,\r\n            Method: minClientHubInvocation.M,\r\n            Args: minClientHubInvocation.A,\r\n            State: minClientHubInvocation.S\r\n        };\r\n    };\r\n\r\n    hubConnection.fn._registerSubscribedHubs = function () {\r\n        /// <summary>\r\n        ///     Sets the starting event to loop through the known hubs and register any new hubs\r\n        ///     that have been added to the proxy.\r\n        /// </summary>\r\n        var connection = this;\r\n\r\n        if (!connection._subscribedToHubs) {\r\n            connection._subscribedToHubs = true;\r\n            connection.starting(function () {\r\n                // Set the connection's data object with all the hub proxies with active subscriptions.\r\n                // These proxies will receive notifications from the server.\r\n                var subscribedHubs = [];\r\n\r\n                $.each(connection.proxies, function (key) {\r\n                    if (this.hasSubscriptions()) {\r\n                        subscribedHubs.push({ name: key });\r\n                        connection.log(\"Client subscribed to hub '\" + key + \"'.\");\r\n                    }\r\n                });\r\n\r\n                if (subscribedHubs.length === 0) {\r\n                    connection.log(\"No hubs have been subscribed to.  The client will not receive data from hubs.  To fix, declare at least one client side function prior to connection start for each hub you wish to subscribe to.\");\r\n                }\r\n\r\n                connection.data = connection.json.stringify(subscribedHubs);\r\n            });\r\n        }\r\n    };\r\n\r\n    hubConnection.fn.createHubProxy = function (hubName) {\r\n        /// <summary>\r\n        ///     Creates a new proxy object for the given hub connection that can be used to invoke\r\n        ///     methods on server hubs and handle client method invocation requests from the server.\r\n        /// </summary>\r\n        /// <param name=\"hubName\" type=\"String\">\r\n        ///     The name of the hub on the server to create the proxy for.\r\n        /// </param>\r\n\r\n        // Normalize the name to lowercase\r\n        hubName = hubName.toLowerCase();\r\n\r\n        var proxy = this.proxies[hubName];\r\n        if (!proxy) {\r\n            proxy = hubProxy(this, hubName);\r\n            this.proxies[hubName] = proxy;\r\n        }\r\n\r\n        this._registerSubscribedHubs();\r\n\r\n        return proxy;\r\n    };\r\n\r\n    hubConnection.fn.init.prototype = hubConnection.fn;\r\n\r\n    $.hubConnection = hubConnection;\r\n\r\n}(jQueryShim, window));\r\n/* jquery.signalR.version.js */\r\n// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n\r\n/*global window:false */\r\n/// <reference path=\"jquery.signalR.core.js\" />\r\n(function ($, undefined) {\r\n    $.signalR.version = \"2.2.1\";\r\n}(jQueryShim));\r\n\r\nexport const hubConnection = jQueryShim.hubConnection;\r\nexport const signalR = jQueryShim.signalR;\r\n","import { NgModule, ModuleWithProviders, NgZone, InjectionToken } from '@angular/core';\r\nimport { SignalR } from '../services/signalr';\r\nimport { SignalRConfiguration } from '../services/signalr.configuration';\r\nimport { hubConnection } from '../signalr-no-jquery/signalR';\r\n\r\nconst SIGNALR_CONFIGURATION = new InjectionToken<SignalRConfiguration>('SIGNALR_CONFIGURATION');\r\n\r\nexport function createSignalr(configuration: SignalRConfiguration, zone: NgZone) {\r\n\r\n    const jConnectionFn = getJConnectionFn();\r\n\r\n    return new SignalR(configuration, zone, jConnectionFn);\r\n}\r\n\r\nfunction getJConnectionFn(): any {\r\n    const hubConnectionFn = hubConnection;\r\n    if (hubConnectionFn == null) {\r\n        throw new Error('Signalr failed to initialize. Script \\'jquery.signalR.js\\' is missing. Please make sure to include \\'jquery.signalR.js\\' script.');\r\n    }\r\n    return hubConnectionFn;\r\n}\r\n@NgModule({\r\n    providers: [{\r\n        provide: SignalR,\r\n        useValue: SignalR\r\n    }]\r\n})\r\nexport class SignalRModule {\r\n    public static forRoot(getSignalRConfiguration: () => void): ModuleWithProviders {\r\n        return {\r\n            ngModule: SignalRModule,\r\n            providers: [\r\n                {\r\n                    provide: SIGNALR_CONFIGURATION,\r\n                    useFactory: getSignalRConfiguration\r\n                },\r\n                {\r\n                    deps: [SIGNALR_CONFIGURATION, NgZone],\r\n                    provide: SignalR,\r\n                    useFactory: (createSignalr)\r\n                }\r\n            ],\r\n        };\r\n    }\r\n    public static forChild(): ModuleWithProviders {\r\n        throw new Error('forChild method not implemented');\r\n    }\r\n}\r\n"]}